// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// BraceletBraceletcolor is an object representing the database table.
type BraceletBraceletcolor struct {
	ID       int `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hexcolor int `boil:"hexcolor" json:"hexcolor" toml:"hexcolor" yaml:"hexcolor"`

	R *braceletBraceletcolorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletBraceletcolorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletBraceletcolorR is where relationships are stored.
type braceletBraceletcolorR struct {
	ColorBraceletBraceletstrings BraceletBraceletstringSlice
}

// braceletBraceletcolorL is where Load methods for each relationship are stored.
type braceletBraceletcolorL struct{}

var (
	braceletBraceletcolorColumns               = []string{"id", "hexcolor"}
	braceletBraceletcolorColumnsWithoutDefault = []string{"hexcolor"}
	braceletBraceletcolorColumnsWithDefault    = []string{"id"}
	braceletBraceletcolorPrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletBraceletcolorSlice is an alias for a slice of pointers to BraceletBraceletcolor.
	// This should generally be used opposed to []BraceletBraceletcolor.
	BraceletBraceletcolorSlice []*BraceletBraceletcolor

	braceletBraceletcolorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletBraceletcolorType                 = reflect.TypeOf(&BraceletBraceletcolor{})
	braceletBraceletcolorMapping              = queries.MakeStructMapping(braceletBraceletcolorType)
	braceletBraceletcolorPrimaryKeyMapping, _ = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, braceletBraceletcolorPrimaryKeyColumns)
	braceletBraceletcolorInsertCacheMut       sync.RWMutex
	braceletBraceletcolorInsertCache          = make(map[string]insertCache)
	braceletBraceletcolorUpdateCacheMut       sync.RWMutex
	braceletBraceletcolorUpdateCache          = make(map[string]updateCache)
	braceletBraceletcolorUpsertCacheMut       sync.RWMutex
	braceletBraceletcolorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletBraceletcolor record from the query, and panics on error.
func (q braceletBraceletcolorQuery) OneP() *BraceletBraceletcolor {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletBraceletcolor record from the query.
func (q braceletBraceletcolorQuery) One() (*BraceletBraceletcolor, error) {
	o := &BraceletBraceletcolor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_braceletcolor")
	}

	return o, nil
}

// AllP returns all BraceletBraceletcolor records from the query, and panics on error.
func (q braceletBraceletcolorQuery) AllP() BraceletBraceletcolorSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletBraceletcolor records from the query.
func (q braceletBraceletcolorQuery) All() (BraceletBraceletcolorSlice, error) {
	var o BraceletBraceletcolorSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletBraceletcolor slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletBraceletcolor records in the query, and panics on error.
func (q braceletBraceletcolorQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletBraceletcolor records in the query.
func (q braceletBraceletcolorQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_braceletcolor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletBraceletcolorQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletBraceletcolorQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_braceletcolor exists")
	}

	return count > 0, nil
}

// ColorBraceletBraceletstringsG retrieves all the bracelet_braceletstring's bracelet braceletstring via color_id column.
func (o *BraceletBraceletcolor) ColorBraceletBraceletstringsG(mods ...qm.QueryMod) braceletBraceletstringQuery {
	return o.ColorBraceletBraceletstrings(boil.GetDB(), mods...)
}

// ColorBraceletBraceletstrings retrieves all the bracelet_braceletstring's bracelet braceletstring with an executor via color_id column.
func (o *BraceletBraceletcolor) ColorBraceletBraceletstrings(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletstringQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`color_id`=?", o.ID),
	)

	query := BraceletBraceletstrings(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletstring` as `a`")
	return query
}

// LoadColorBraceletBraceletstrings allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletcolorL) LoadColorBraceletBraceletstrings(e boil.Executor, singular bool, maybeBraceletBraceletcolor interface{}) error {
	var slice []*BraceletBraceletcolor
	var object *BraceletBraceletcolor

	count := 1
	if singular {
		object = maybeBraceletBraceletcolor.(*BraceletBraceletcolor)
	} else {
		slice = *maybeBraceletBraceletcolor.(*BraceletBraceletcolorSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletcolorR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletcolorR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletstring` where `color_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_braceletstring")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletstring
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_braceletstring")
	}

	if singular {
		object.R.ColorBraceletBraceletstrings = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ColorID {
				local.R.ColorBraceletBraceletstrings = append(local.R.ColorBraceletBraceletstrings, foreign)
				break
			}
		}
	}

	return nil
}

// AddColorBraceletBraceletstringsG adds the given related objects to the existing relationships
// of the bracelet_braceletcolor, optionally inserting them as new records.
// Appends related to o.R.ColorBraceletBraceletstrings.
// Sets related.R.Color appropriately.
// Uses the global database handle.
func (o *BraceletBraceletcolor) AddColorBraceletBraceletstringsG(insert bool, related ...*BraceletBraceletstring) error {
	return o.AddColorBraceletBraceletstrings(boil.GetDB(), insert, related...)
}

// AddColorBraceletBraceletstringsP adds the given related objects to the existing relationships
// of the bracelet_braceletcolor, optionally inserting them as new records.
// Appends related to o.R.ColorBraceletBraceletstrings.
// Sets related.R.Color appropriately.
// Panics on error.
func (o *BraceletBraceletcolor) AddColorBraceletBraceletstringsP(exec boil.Executor, insert bool, related ...*BraceletBraceletstring) {
	if err := o.AddColorBraceletBraceletstrings(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddColorBraceletBraceletstringsGP adds the given related objects to the existing relationships
// of the bracelet_braceletcolor, optionally inserting them as new records.
// Appends related to o.R.ColorBraceletBraceletstrings.
// Sets related.R.Color appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBraceletcolor) AddColorBraceletBraceletstringsGP(insert bool, related ...*BraceletBraceletstring) {
	if err := o.AddColorBraceletBraceletstrings(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddColorBraceletBraceletstrings adds the given related objects to the existing relationships
// of the bracelet_braceletcolor, optionally inserting them as new records.
// Appends related to o.R.ColorBraceletBraceletstrings.
// Sets related.R.Color appropriately.
func (o *BraceletBraceletcolor) AddColorBraceletBraceletstrings(exec boil.Executor, insert bool, related ...*BraceletBraceletstring) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColorID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_braceletstring` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"color_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletstringPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletcolorR{
			ColorBraceletBraceletstrings: related,
		}
	} else {
		o.R.ColorBraceletBraceletstrings = append(o.R.ColorBraceletBraceletstrings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletstringR{
				Color: o,
			}
		} else {
			rel.R.Color = o
		}
	}
	return nil
}

// BraceletBraceletcolorsG retrieves all records.
func BraceletBraceletcolorsG(mods ...qm.QueryMod) braceletBraceletcolorQuery {
	return BraceletBraceletcolors(boil.GetDB(), mods...)
}

// BraceletBraceletcolors retrieves all the records using an executor.
func BraceletBraceletcolors(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletcolorQuery {
	mods = append(mods, qm.From("`bracelet_braceletcolor`"))
	return braceletBraceletcolorQuery{NewQuery(exec, mods...)}
}

// FindBraceletBraceletcolorG retrieves a single record by ID.
func FindBraceletBraceletcolorG(id int, selectCols ...string) (*BraceletBraceletcolor, error) {
	return FindBraceletBraceletcolor(boil.GetDB(), id, selectCols...)
}

// FindBraceletBraceletcolorGP retrieves a single record by ID, and panics on error.
func FindBraceletBraceletcolorGP(id int, selectCols ...string) *BraceletBraceletcolor {
	retobj, err := FindBraceletBraceletcolor(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletBraceletcolor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletBraceletcolor(exec boil.Executor, id int, selectCols ...string) (*BraceletBraceletcolor, error) {
	braceletBraceletcolorObj := &BraceletBraceletcolor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_braceletcolor` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletBraceletcolorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_braceletcolor")
	}

	return braceletBraceletcolorObj, nil
}

// FindBraceletBraceletcolorP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletBraceletcolorP(exec boil.Executor, id int, selectCols ...string) *BraceletBraceletcolor {
	retobj, err := FindBraceletBraceletcolor(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletBraceletcolor) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletBraceletcolor) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletBraceletcolor) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletBraceletcolor) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletcolor provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletcolorColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletBraceletcolorInsertCacheMut.RLock()
	cache, cached := braceletBraceletcolorInsertCache[key]
	braceletBraceletcolorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletBraceletcolorColumns,
			braceletBraceletcolorColumnsWithDefault,
			braceletBraceletcolorColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_braceletcolor` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_braceletcolor` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletBraceletcolorPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_braceletcolor")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletcolorMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletcolor")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletcolorInsertCacheMut.Lock()
		braceletBraceletcolorInsertCache[key] = cache
		braceletBraceletcolorInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletBraceletcolor record. See Update for
// whitelist behavior description.
func (o *BraceletBraceletcolor) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletBraceletcolor record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletBraceletcolor) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletBraceletcolor, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletBraceletcolor) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletBraceletcolor.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletBraceletcolor) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletBraceletcolorUpdateCacheMut.RLock()
	cache, cached := braceletBraceletcolorUpdateCache[key]
	braceletBraceletcolorUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletBraceletcolorColumns, braceletBraceletcolorPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_braceletcolor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_braceletcolor` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletBraceletcolorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, append(wl, braceletBraceletcolorPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_braceletcolor row")
	}

	if !cached {
		braceletBraceletcolorUpdateCacheMut.Lock()
		braceletBraceletcolorUpdateCache[key] = cache
		braceletBraceletcolorUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletBraceletcolorQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletBraceletcolorQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_braceletcolor")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletBraceletcolorSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletcolorSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletcolorSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletBraceletcolorSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcolorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_braceletcolor` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletcolorPrimaryKeyColumns), len(colNames)+1, len(braceletBraceletcolorPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletBraceletcolor slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletBraceletcolor) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletBraceletcolor) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletBraceletcolor) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletBraceletcolor) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletcolor provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletcolorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletBraceletcolorUpsertCacheMut.RLock()
	cache, cached := braceletBraceletcolorUpsertCache[key]
	braceletBraceletcolorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletBraceletcolorColumns,
			braceletBraceletcolorColumnsWithDefault,
			braceletBraceletcolorColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletBraceletcolorColumns,
			braceletBraceletcolorPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_braceletcolor, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_braceletcolor", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_braceletcolor` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletBraceletcolorType, braceletBraceletcolorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_braceletcolor")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletcolorMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletcolor")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletcolorUpsertCacheMut.Lock()
		braceletBraceletcolorUpsertCache[key] = cache
		braceletBraceletcolorUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletBraceletcolor record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletcolor) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletBraceletcolor record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletBraceletcolor) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcolor provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletBraceletcolor record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletcolor) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletBraceletcolor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletBraceletcolor) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcolor provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletBraceletcolorPrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_braceletcolor` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_braceletcolor")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletBraceletcolorQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletBraceletcolorQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletBraceletcolorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_braceletcolor")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletBraceletcolorSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletBraceletcolorSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcolor slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletBraceletcolorSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletBraceletcolorSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcolor slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcolorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_braceletcolor` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletcolorPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletcolorPrimaryKeyColumns), 1, len(braceletBraceletcolorPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletBraceletcolor slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletBraceletcolor) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletBraceletcolor) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletBraceletcolor) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcolor provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletBraceletcolor) Reload(exec boil.Executor) error {
	ret, err := FindBraceletBraceletcolor(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletcolorSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletcolorSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletcolorSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletBraceletcolorSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletcolorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletBraceletcolors := BraceletBraceletcolorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcolorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_braceletcolor`.* FROM `bracelet_braceletcolor` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletcolorPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletBraceletcolorPrimaryKeyColumns), 1, len(braceletBraceletcolorPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletBraceletcolors)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletBraceletcolorSlice")
	}

	*o = braceletBraceletcolors

	return nil
}

// BraceletBraceletcolorExists checks if the BraceletBraceletcolor row exists.
func BraceletBraceletcolorExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_braceletcolor` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_braceletcolor exists")
	}

	return exists, nil
}

// BraceletBraceletcolorExistsG checks if the BraceletBraceletcolor row exists.
func BraceletBraceletcolorExistsG(id int) (bool, error) {
	return BraceletBraceletcolorExists(boil.GetDB(), id)
}

// BraceletBraceletcolorExistsGP checks if the BraceletBraceletcolor row exists. Panics on error.
func BraceletBraceletcolorExistsGP(id int) bool {
	e, err := BraceletBraceletcolorExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletBraceletcolorExistsP checks if the BraceletBraceletcolor row exists. Panics on error.
func BraceletBraceletcolorExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletBraceletcolorExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
