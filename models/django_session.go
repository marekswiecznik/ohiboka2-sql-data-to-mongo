// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// DjangoSession is an object representing the database table.
type DjangoSession struct {
	SessionKey  string    `boil:"session_key" json:"session_key" toml:"session_key" yaml:"session_key"`
	SessionData string    `boil:"session_data" json:"session_data" toml:"session_data" yaml:"session_data"`
	ExpireDate  time.Time `boil:"expire_date" json:"expire_date" toml:"expire_date" yaml:"expire_date"`

	R *djangoSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// djangoSessionR is where relationships are stored.
type djangoSessionR struct {
}

// djangoSessionL is where Load methods for each relationship are stored.
type djangoSessionL struct{}

var (
	djangoSessionColumns               = []string{"session_key", "session_data", "expire_date"}
	djangoSessionColumnsWithoutDefault = []string{"session_key", "session_data", "expire_date"}
	djangoSessionColumnsWithDefault    = []string{}
	djangoSessionPrimaryKeyColumns     = []string{"session_key"}
)

type (
	// DjangoSessionSlice is an alias for a slice of pointers to DjangoSession.
	// This should generally be used opposed to []DjangoSession.
	DjangoSessionSlice []*DjangoSession

	djangoSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoSessionType                 = reflect.TypeOf(&DjangoSession{})
	djangoSessionMapping              = queries.MakeStructMapping(djangoSessionType)
	djangoSessionPrimaryKeyMapping, _ = queries.BindMapping(djangoSessionType, djangoSessionMapping, djangoSessionPrimaryKeyColumns)
	djangoSessionInsertCacheMut       sync.RWMutex
	djangoSessionInsertCache          = make(map[string]insertCache)
	djangoSessionUpdateCacheMut       sync.RWMutex
	djangoSessionUpdateCache          = make(map[string]updateCache)
	djangoSessionUpsertCacheMut       sync.RWMutex
	djangoSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single djangoSession record from the query, and panics on error.
func (q djangoSessionQuery) OneP() *DjangoSession {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single djangoSession record from the query.
func (q djangoSessionQuery) One() (*DjangoSession, error) {
	o := &DjangoSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_session")
	}

	return o, nil
}

// AllP returns all DjangoSession records from the query, and panics on error.
func (q djangoSessionQuery) AllP() DjangoSessionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all DjangoSession records from the query.
func (q djangoSessionQuery) All() (DjangoSessionSlice, error) {
	var o DjangoSessionSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoSession slice")
	}

	return o, nil
}

// CountP returns the count of all DjangoSession records in the query, and panics on error.
func (q djangoSessionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all DjangoSession records in the query.
func (q djangoSessionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_session rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q djangoSessionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q djangoSessionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_session exists")
	}

	return count > 0, nil
}

// DjangoSessionsG retrieves all records.
func DjangoSessionsG(mods ...qm.QueryMod) djangoSessionQuery {
	return DjangoSessions(boil.GetDB(), mods...)
}

// DjangoSessions retrieves all the records using an executor.
func DjangoSessions(exec boil.Executor, mods ...qm.QueryMod) djangoSessionQuery {
	mods = append(mods, qm.From("`django_session`"))
	return djangoSessionQuery{NewQuery(exec, mods...)}
}

// FindDjangoSessionG retrieves a single record by ID.
func FindDjangoSessionG(sessionKey string, selectCols ...string) (*DjangoSession, error) {
	return FindDjangoSession(boil.GetDB(), sessionKey, selectCols...)
}

// FindDjangoSessionGP retrieves a single record by ID, and panics on error.
func FindDjangoSessionGP(sessionKey string, selectCols ...string) *DjangoSession {
	retobj, err := FindDjangoSession(boil.GetDB(), sessionKey, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDjangoSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoSession(exec boil.Executor, sessionKey string, selectCols ...string) (*DjangoSession, error) {
	djangoSessionObj := &DjangoSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `django_session` where `session_key`=?", sel,
	)

	q := queries.Raw(exec, query, sessionKey)

	err := q.Bind(djangoSessionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_session")
	}

	return djangoSessionObj, nil
}

// FindDjangoSessionP retrieves a single record by ID with an executor, and panics on error.
func FindDjangoSessionP(exec boil.Executor, sessionKey string, selectCols ...string) *DjangoSession {
	retobj, err := FindDjangoSession(exec, sessionKey, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DjangoSession) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *DjangoSession) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *DjangoSession) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *DjangoSession) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_session provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoSessionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	djangoSessionInsertCacheMut.RLock()
	cache, cached := djangoSessionInsertCache[key]
	djangoSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			djangoSessionColumns,
			djangoSessionColumnsWithDefault,
			djangoSessionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(djangoSessionType, djangoSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoSessionType, djangoSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `django_session` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `django_session` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, djangoSessionPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_session")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SessionKey,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_session")
	}

CacheNoHooks:
	if !cached {
		djangoSessionInsertCacheMut.Lock()
		djangoSessionInsertCache[key] = cache
		djangoSessionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DjangoSession record. See Update for
// whitelist behavior description.
func (o *DjangoSession) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single DjangoSession record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *DjangoSession) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the DjangoSession, and panics on error.
// See Update for whitelist behavior description.
func (o *DjangoSession) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the DjangoSession.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *DjangoSession) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	djangoSessionUpdateCacheMut.RLock()
	cache, cached := djangoSessionUpdateCache[key]
	djangoSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(djangoSessionColumns, djangoSessionPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update django_session, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `django_session` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, djangoSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoSessionType, djangoSessionMapping, append(wl, djangoSessionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update django_session row")
	}

	if !cached {
		djangoSessionUpdateCacheMut.Lock()
		djangoSessionUpdateCache[key] = cache
		djangoSessionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q djangoSessionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q djangoSessionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for django_session")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DjangoSessionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DjangoSessionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DjangoSessionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoSessionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `django_session` SET %s WHERE (`session_key`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoSessionPrimaryKeyColumns), len(colNames)+1, len(djangoSessionPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in djangoSession slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DjangoSession) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *DjangoSession) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *DjangoSession) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DjangoSession) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_session provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoSessionUpsertCacheMut.RLock()
	cache, cached := djangoSessionUpsertCache[key]
	djangoSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			djangoSessionColumns,
			djangoSessionColumnsWithDefault,
			djangoSessionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			djangoSessionColumns,
			djangoSessionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert django_session, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "django_session", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `django_session` WHERE `session_key`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(djangoSessionType, djangoSessionMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoSessionType, djangoSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for django_session")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SessionKey,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_session")
	}

CacheNoHooks:
	if !cached {
		djangoSessionUpsertCacheMut.Lock()
		djangoSessionUpsertCache[key] = cache
		djangoSessionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single DjangoSession record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoSession) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single DjangoSession record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DjangoSession) DeleteG() error {
	if o == nil {
		return errors.New("models: no DjangoSession provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single DjangoSession record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoSession) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single DjangoSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoSession) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoSession provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoSessionPrimaryKeyMapping)
	sql := "DELETE FROM `django_session` WHERE `session_key`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from django_session")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q djangoSessionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q djangoSessionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no djangoSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from django_session")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DjangoSessionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DjangoSessionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no DjangoSession slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DjangoSessionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoSessionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoSession slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `django_session` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoSessionPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoSessionPrimaryKeyColumns), 1, len(djangoSessionPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from djangoSession slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *DjangoSession) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *DjangoSession) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DjangoSession) ReloadG() error {
	if o == nil {
		return errors.New("models: no DjangoSession provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoSession) Reload(exec boil.Executor) error {
	ret, err := FindDjangoSession(exec, o.SessionKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoSessionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoSessionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoSessionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DjangoSessionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoSessionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	djangoSessions := DjangoSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `django_session`.* FROM `django_session` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoSessionPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(djangoSessionPrimaryKeyColumns), 1, len(djangoSessionPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&djangoSessions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoSessionSlice")
	}

	*o = djangoSessions

	return nil
}

// DjangoSessionExists checks if the DjangoSession row exists.
func DjangoSessionExists(exec boil.Executor, sessionKey string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `django_session` where `session_key`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, sessionKey)
	}

	row := exec.QueryRow(sql, sessionKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_session exists")
	}

	return exists, nil
}

// DjangoSessionExistsG checks if the DjangoSession row exists.
func DjangoSessionExistsG(sessionKey string) (bool, error) {
	return DjangoSessionExists(boil.GetDB(), sessionKey)
}

// DjangoSessionExistsGP checks if the DjangoSession row exists. Panics on error.
func DjangoSessionExistsGP(sessionKey string) bool {
	e, err := DjangoSessionExists(boil.GetDB(), sessionKey)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DjangoSessionExistsP checks if the DjangoSession row exists. Panics on error.
func DjangoSessionExistsP(exec boil.Executor, sessionKey string) bool {
	e, err := DjangoSessionExists(exec, sessionKey)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
