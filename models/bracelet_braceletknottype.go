// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// BraceletBraceletknottype is an object representing the database table.
type BraceletBraceletknottype struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Text string `boil:"text" json:"text" toml:"text" yaml:"text"`

	R *braceletBraceletknottypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletBraceletknottypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletBraceletknottypeR is where relationships are stored.
type braceletBraceletknottypeR struct {
	KnottypeBraceletBraceletknots BraceletBraceletknotSlice
}

// braceletBraceletknottypeL is where Load methods for each relationship are stored.
type braceletBraceletknottypeL struct{}

var (
	braceletBraceletknottypeColumns               = []string{"id", "text"}
	braceletBraceletknottypeColumnsWithoutDefault = []string{"text"}
	braceletBraceletknottypeColumnsWithDefault    = []string{"id"}
	braceletBraceletknottypePrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletBraceletknottypeSlice is an alias for a slice of pointers to BraceletBraceletknottype.
	// This should generally be used opposed to []BraceletBraceletknottype.
	BraceletBraceletknottypeSlice []*BraceletBraceletknottype

	braceletBraceletknottypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletBraceletknottypeType                 = reflect.TypeOf(&BraceletBraceletknottype{})
	braceletBraceletknottypeMapping              = queries.MakeStructMapping(braceletBraceletknottypeType)
	braceletBraceletknottypePrimaryKeyMapping, _ = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, braceletBraceletknottypePrimaryKeyColumns)
	braceletBraceletknottypeInsertCacheMut       sync.RWMutex
	braceletBraceletknottypeInsertCache          = make(map[string]insertCache)
	braceletBraceletknottypeUpdateCacheMut       sync.RWMutex
	braceletBraceletknottypeUpdateCache          = make(map[string]updateCache)
	braceletBraceletknottypeUpsertCacheMut       sync.RWMutex
	braceletBraceletknottypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletBraceletknottype record from the query, and panics on error.
func (q braceletBraceletknottypeQuery) OneP() *BraceletBraceletknottype {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletBraceletknottype record from the query.
func (q braceletBraceletknottypeQuery) One() (*BraceletBraceletknottype, error) {
	o := &BraceletBraceletknottype{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_braceletknottype")
	}

	return o, nil
}

// AllP returns all BraceletBraceletknottype records from the query, and panics on error.
func (q braceletBraceletknottypeQuery) AllP() BraceletBraceletknottypeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletBraceletknottype records from the query.
func (q braceletBraceletknottypeQuery) All() (BraceletBraceletknottypeSlice, error) {
	var o BraceletBraceletknottypeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletBraceletknottype slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletBraceletknottype records in the query, and panics on error.
func (q braceletBraceletknottypeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletBraceletknottype records in the query.
func (q braceletBraceletknottypeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_braceletknottype rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletBraceletknottypeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletBraceletknottypeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_braceletknottype exists")
	}

	return count > 0, nil
}

// KnottypeBraceletBraceletknotsG retrieves all the bracelet_braceletknot's bracelet braceletknot via knottype_id column.
func (o *BraceletBraceletknottype) KnottypeBraceletBraceletknotsG(mods ...qm.QueryMod) braceletBraceletknotQuery {
	return o.KnottypeBraceletBraceletknots(boil.GetDB(), mods...)
}

// KnottypeBraceletBraceletknots retrieves all the bracelet_braceletknot's bracelet braceletknot with an executor via knottype_id column.
func (o *BraceletBraceletknottype) KnottypeBraceletBraceletknots(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletknotQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`knottype_id`=?", o.ID),
	)

	query := BraceletBraceletknots(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletknot` as `a`")
	return query
}

// LoadKnottypeBraceletBraceletknots allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletknottypeL) LoadKnottypeBraceletBraceletknots(e boil.Executor, singular bool, maybeBraceletBraceletknottype interface{}) error {
	var slice []*BraceletBraceletknottype
	var object *BraceletBraceletknottype

	count := 1
	if singular {
		object = maybeBraceletBraceletknottype.(*BraceletBraceletknottype)
	} else {
		slice = *maybeBraceletBraceletknottype.(*BraceletBraceletknottypeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletknottypeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletknottypeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletknot` where `knottype_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_braceletknot")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletknot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_braceletknot")
	}

	if singular {
		object.R.KnottypeBraceletBraceletknots = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KnottypeID {
				local.R.KnottypeBraceletBraceletknots = append(local.R.KnottypeBraceletBraceletknots, foreign)
				break
			}
		}
	}

	return nil
}

// AddKnottypeBraceletBraceletknotsG adds the given related objects to the existing relationships
// of the bracelet_braceletknottype, optionally inserting them as new records.
// Appends related to o.R.KnottypeBraceletBraceletknots.
// Sets related.R.Knottype appropriately.
// Uses the global database handle.
func (o *BraceletBraceletknottype) AddKnottypeBraceletBraceletknotsG(insert bool, related ...*BraceletBraceletknot) error {
	return o.AddKnottypeBraceletBraceletknots(boil.GetDB(), insert, related...)
}

// AddKnottypeBraceletBraceletknotsP adds the given related objects to the existing relationships
// of the bracelet_braceletknottype, optionally inserting them as new records.
// Appends related to o.R.KnottypeBraceletBraceletknots.
// Sets related.R.Knottype appropriately.
// Panics on error.
func (o *BraceletBraceletknottype) AddKnottypeBraceletBraceletknotsP(exec boil.Executor, insert bool, related ...*BraceletBraceletknot) {
	if err := o.AddKnottypeBraceletBraceletknots(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddKnottypeBraceletBraceletknotsGP adds the given related objects to the existing relationships
// of the bracelet_braceletknottype, optionally inserting them as new records.
// Appends related to o.R.KnottypeBraceletBraceletknots.
// Sets related.R.Knottype appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBraceletknottype) AddKnottypeBraceletBraceletknotsGP(insert bool, related ...*BraceletBraceletknot) {
	if err := o.AddKnottypeBraceletBraceletknots(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddKnottypeBraceletBraceletknots adds the given related objects to the existing relationships
// of the bracelet_braceletknottype, optionally inserting them as new records.
// Appends related to o.R.KnottypeBraceletBraceletknots.
// Sets related.R.Knottype appropriately.
func (o *BraceletBraceletknottype) AddKnottypeBraceletBraceletknots(exec boil.Executor, insert bool, related ...*BraceletBraceletknot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KnottypeID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_braceletknot` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"knottype_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KnottypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletknottypeR{
			KnottypeBraceletBraceletknots: related,
		}
	} else {
		o.R.KnottypeBraceletBraceletknots = append(o.R.KnottypeBraceletBraceletknots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletknotR{
				Knottype: o,
			}
		} else {
			rel.R.Knottype = o
		}
	}
	return nil
}

// BraceletBraceletknottypesG retrieves all records.
func BraceletBraceletknottypesG(mods ...qm.QueryMod) braceletBraceletknottypeQuery {
	return BraceletBraceletknottypes(boil.GetDB(), mods...)
}

// BraceletBraceletknottypes retrieves all the records using an executor.
func BraceletBraceletknottypes(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletknottypeQuery {
	mods = append(mods, qm.From("`bracelet_braceletknottype`"))
	return braceletBraceletknottypeQuery{NewQuery(exec, mods...)}
}

// FindBraceletBraceletknottypeG retrieves a single record by ID.
func FindBraceletBraceletknottypeG(id int, selectCols ...string) (*BraceletBraceletknottype, error) {
	return FindBraceletBraceletknottype(boil.GetDB(), id, selectCols...)
}

// FindBraceletBraceletknottypeGP retrieves a single record by ID, and panics on error.
func FindBraceletBraceletknottypeGP(id int, selectCols ...string) *BraceletBraceletknottype {
	retobj, err := FindBraceletBraceletknottype(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletBraceletknottype retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletBraceletknottype(exec boil.Executor, id int, selectCols ...string) (*BraceletBraceletknottype, error) {
	braceletBraceletknottypeObj := &BraceletBraceletknottype{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_braceletknottype` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletBraceletknottypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_braceletknottype")
	}

	return braceletBraceletknottypeObj, nil
}

// FindBraceletBraceletknottypeP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletBraceletknottypeP(exec boil.Executor, id int, selectCols ...string) *BraceletBraceletknottype {
	retobj, err := FindBraceletBraceletknottype(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletBraceletknottype) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletBraceletknottype) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletBraceletknottype) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletBraceletknottype) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletknottype provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletknottypeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletBraceletknottypeInsertCacheMut.RLock()
	cache, cached := braceletBraceletknottypeInsertCache[key]
	braceletBraceletknottypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletBraceletknottypeColumns,
			braceletBraceletknottypeColumnsWithDefault,
			braceletBraceletknottypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_braceletknottype` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_braceletknottype` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletBraceletknottypePrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_braceletknottype")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletknottypeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletknottype")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletknottypeInsertCacheMut.Lock()
		braceletBraceletknottypeInsertCache[key] = cache
		braceletBraceletknottypeInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletBraceletknottype record. See Update for
// whitelist behavior description.
func (o *BraceletBraceletknottype) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletBraceletknottype record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletBraceletknottype) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletBraceletknottype, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletBraceletknottype) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletBraceletknottype.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletBraceletknottype) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletBraceletknottypeUpdateCacheMut.RLock()
	cache, cached := braceletBraceletknottypeUpdateCache[key]
	braceletBraceletknottypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletBraceletknottypeColumns, braceletBraceletknottypePrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_braceletknottype, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_braceletknottype` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletBraceletknottypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, append(wl, braceletBraceletknottypePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_braceletknottype row")
	}

	if !cached {
		braceletBraceletknottypeUpdateCacheMut.Lock()
		braceletBraceletknottypeUpdateCache[key] = cache
		braceletBraceletknottypeUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletBraceletknottypeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletBraceletknottypeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_braceletknottype")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletBraceletknottypeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletknottypeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletknottypeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletBraceletknottypeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknottypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_braceletknottype` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletknottypePrimaryKeyColumns), len(colNames)+1, len(braceletBraceletknottypePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletBraceletknottype slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletBraceletknottype) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletBraceletknottype) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletBraceletknottype) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletBraceletknottype) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletknottype provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletknottypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletBraceletknottypeUpsertCacheMut.RLock()
	cache, cached := braceletBraceletknottypeUpsertCache[key]
	braceletBraceletknottypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletBraceletknottypeColumns,
			braceletBraceletknottypeColumnsWithDefault,
			braceletBraceletknottypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletBraceletknottypeColumns,
			braceletBraceletknottypePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_braceletknottype, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_braceletknottype", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_braceletknottype` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletBraceletknottypeType, braceletBraceletknottypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_braceletknottype")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletknottypeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletknottype")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletknottypeUpsertCacheMut.Lock()
		braceletBraceletknottypeUpsertCache[key] = cache
		braceletBraceletknottypeUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletBraceletknottype record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletknottype) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletBraceletknottype record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletBraceletknottype) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknottype provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletBraceletknottype record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletknottype) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletBraceletknottype record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletBraceletknottype) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknottype provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletBraceletknottypePrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_braceletknottype` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_braceletknottype")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletBraceletknottypeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletBraceletknottypeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletBraceletknottypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_braceletknottype")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletBraceletknottypeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletBraceletknottypeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknottype slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletBraceletknottypeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletBraceletknottypeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknottype slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknottypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_braceletknottype` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletknottypePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletknottypePrimaryKeyColumns), 1, len(braceletBraceletknottypePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletBraceletknottype slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletBraceletknottype) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletBraceletknottype) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletBraceletknottype) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknottype provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletBraceletknottype) Reload(exec boil.Executor) error {
	ret, err := FindBraceletBraceletknottype(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletknottypeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletknottypeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletknottypeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletBraceletknottypeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletknottypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletBraceletknottypes := BraceletBraceletknottypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknottypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_braceletknottype`.* FROM `bracelet_braceletknottype` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletknottypePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletBraceletknottypePrimaryKeyColumns), 1, len(braceletBraceletknottypePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletBraceletknottypes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletBraceletknottypeSlice")
	}

	*o = braceletBraceletknottypes

	return nil
}

// BraceletBraceletknottypeExists checks if the BraceletBraceletknottype row exists.
func BraceletBraceletknottypeExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_braceletknottype` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_braceletknottype exists")
	}

	return exists, nil
}

// BraceletBraceletknottypeExistsG checks if the BraceletBraceletknottype row exists.
func BraceletBraceletknottypeExistsG(id int) (bool, error) {
	return BraceletBraceletknottypeExists(boil.GetDB(), id)
}

// BraceletBraceletknottypeExistsGP checks if the BraceletBraceletknottype row exists. Panics on error.
func BraceletBraceletknottypeExistsGP(id int) bool {
	e, err := BraceletBraceletknottypeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletBraceletknottypeExistsP checks if the BraceletBraceletknottype row exists. Panics on error.
func BraceletBraceletknottypeExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletBraceletknottypeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
