// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// BraceletBraceletcategory is an object representing the database table.
type BraceletBraceletcategory struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *braceletBraceletcategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletBraceletcategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletBraceletcategoryR is where relationships are stored.
type braceletBraceletcategoryR struct {
	CategoryBraceletBracelets BraceletBraceletSlice
}

// braceletBraceletcategoryL is where Load methods for each relationship are stored.
type braceletBraceletcategoryL struct{}

var (
	braceletBraceletcategoryColumns               = []string{"id", "name"}
	braceletBraceletcategoryColumnsWithoutDefault = []string{"name"}
	braceletBraceletcategoryColumnsWithDefault    = []string{"id"}
	braceletBraceletcategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletBraceletcategorySlice is an alias for a slice of pointers to BraceletBraceletcategory.
	// This should generally be used opposed to []BraceletBraceletcategory.
	BraceletBraceletcategorySlice []*BraceletBraceletcategory

	braceletBraceletcategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletBraceletcategoryType                 = reflect.TypeOf(&BraceletBraceletcategory{})
	braceletBraceletcategoryMapping              = queries.MakeStructMapping(braceletBraceletcategoryType)
	braceletBraceletcategoryPrimaryKeyMapping, _ = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, braceletBraceletcategoryPrimaryKeyColumns)
	braceletBraceletcategoryInsertCacheMut       sync.RWMutex
	braceletBraceletcategoryInsertCache          = make(map[string]insertCache)
	braceletBraceletcategoryUpdateCacheMut       sync.RWMutex
	braceletBraceletcategoryUpdateCache          = make(map[string]updateCache)
	braceletBraceletcategoryUpsertCacheMut       sync.RWMutex
	braceletBraceletcategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletBraceletcategory record from the query, and panics on error.
func (q braceletBraceletcategoryQuery) OneP() *BraceletBraceletcategory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletBraceletcategory record from the query.
func (q braceletBraceletcategoryQuery) One() (*BraceletBraceletcategory, error) {
	o := &BraceletBraceletcategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_braceletcategory")
	}

	return o, nil
}

// AllP returns all BraceletBraceletcategory records from the query, and panics on error.
func (q braceletBraceletcategoryQuery) AllP() BraceletBraceletcategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletBraceletcategory records from the query.
func (q braceletBraceletcategoryQuery) All() (BraceletBraceletcategorySlice, error) {
	var o BraceletBraceletcategorySlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletBraceletcategory slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletBraceletcategory records in the query, and panics on error.
func (q braceletBraceletcategoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletBraceletcategory records in the query.
func (q braceletBraceletcategoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_braceletcategory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletBraceletcategoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletBraceletcategoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_braceletcategory exists")
	}

	return count > 0, nil
}

// CategoryBraceletBraceletsG retrieves all the bracelet_bracelet's bracelet bracelet via category_id column.
func (o *BraceletBraceletcategory) CategoryBraceletBraceletsG(mods ...qm.QueryMod) braceletBraceletQuery {
	return o.CategoryBraceletBracelets(boil.GetDB(), mods...)
}

// CategoryBraceletBracelets retrieves all the bracelet_bracelet's bracelet bracelet with an executor via category_id column.
func (o *BraceletBraceletcategory) CategoryBraceletBracelets(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`category_id`=?", o.ID),
	)

	query := BraceletBracelets(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_bracelet` as `a`")
	return query
}

// LoadCategoryBraceletBracelets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletcategoryL) LoadCategoryBraceletBracelets(e boil.Executor, singular bool, maybeBraceletBraceletcategory interface{}) error {
	var slice []*BraceletBraceletcategory
	var object *BraceletBraceletcategory

	count := 1
	if singular {
		object = maybeBraceletBraceletcategory.(*BraceletBraceletcategory)
	} else {
		slice = *maybeBraceletBraceletcategory.(*BraceletBraceletcategorySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletcategoryR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletcategoryR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_bracelet` where `category_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_bracelet")
	}
	defer results.Close()

	var resultSlice []*BraceletBracelet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_bracelet")
	}

	if singular {
		object.R.CategoryBraceletBracelets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryBraceletBracelets = append(local.R.CategoryBraceletBracelets, foreign)
				break
			}
		}
	}

	return nil
}

// AddCategoryBraceletBraceletsG adds the given related objects to the existing relationships
// of the bracelet_braceletcategory, optionally inserting them as new records.
// Appends related to o.R.CategoryBraceletBracelets.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *BraceletBraceletcategory) AddCategoryBraceletBraceletsG(insert bool, related ...*BraceletBracelet) error {
	return o.AddCategoryBraceletBracelets(boil.GetDB(), insert, related...)
}

// AddCategoryBraceletBraceletsP adds the given related objects to the existing relationships
// of the bracelet_braceletcategory, optionally inserting them as new records.
// Appends related to o.R.CategoryBraceletBracelets.
// Sets related.R.Category appropriately.
// Panics on error.
func (o *BraceletBraceletcategory) AddCategoryBraceletBraceletsP(exec boil.Executor, insert bool, related ...*BraceletBracelet) {
	if err := o.AddCategoryBraceletBracelets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryBraceletBraceletsGP adds the given related objects to the existing relationships
// of the bracelet_braceletcategory, optionally inserting them as new records.
// Appends related to o.R.CategoryBraceletBracelets.
// Sets related.R.Category appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBraceletcategory) AddCategoryBraceletBraceletsGP(insert bool, related ...*BraceletBracelet) {
	if err := o.AddCategoryBraceletBracelets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoryBraceletBracelets adds the given related objects to the existing relationships
// of the bracelet_braceletcategory, optionally inserting them as new records.
// Appends related to o.R.CategoryBraceletBracelets.
// Sets related.R.Category appropriately.
func (o *BraceletBraceletcategory) AddCategoryBraceletBracelets(exec boil.Executor, insert bool, related ...*BraceletBracelet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_bracelet` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletcategoryR{
			CategoryBraceletBracelets: related,
		}
	} else {
		o.R.CategoryBraceletBracelets = append(o.R.CategoryBraceletBracelets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// BraceletBraceletcategoriesG retrieves all records.
func BraceletBraceletcategoriesG(mods ...qm.QueryMod) braceletBraceletcategoryQuery {
	return BraceletBraceletcategories(boil.GetDB(), mods...)
}

// BraceletBraceletcategories retrieves all the records using an executor.
func BraceletBraceletcategories(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletcategoryQuery {
	mods = append(mods, qm.From("`bracelet_braceletcategory`"))
	return braceletBraceletcategoryQuery{NewQuery(exec, mods...)}
}

// FindBraceletBraceletcategoryG retrieves a single record by ID.
func FindBraceletBraceletcategoryG(id int, selectCols ...string) (*BraceletBraceletcategory, error) {
	return FindBraceletBraceletcategory(boil.GetDB(), id, selectCols...)
}

// FindBraceletBraceletcategoryGP retrieves a single record by ID, and panics on error.
func FindBraceletBraceletcategoryGP(id int, selectCols ...string) *BraceletBraceletcategory {
	retobj, err := FindBraceletBraceletcategory(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletBraceletcategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletBraceletcategory(exec boil.Executor, id int, selectCols ...string) (*BraceletBraceletcategory, error) {
	braceletBraceletcategoryObj := &BraceletBraceletcategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_braceletcategory` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletBraceletcategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_braceletcategory")
	}

	return braceletBraceletcategoryObj, nil
}

// FindBraceletBraceletcategoryP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletBraceletcategoryP(exec boil.Executor, id int, selectCols ...string) *BraceletBraceletcategory {
	retobj, err := FindBraceletBraceletcategory(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletBraceletcategory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletBraceletcategory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletBraceletcategory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletBraceletcategory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletcategory provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletcategoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletBraceletcategoryInsertCacheMut.RLock()
	cache, cached := braceletBraceletcategoryInsertCache[key]
	braceletBraceletcategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletBraceletcategoryColumns,
			braceletBraceletcategoryColumnsWithDefault,
			braceletBraceletcategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_braceletcategory` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_braceletcategory` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletBraceletcategoryPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_braceletcategory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletcategoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletcategory")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletcategoryInsertCacheMut.Lock()
		braceletBraceletcategoryInsertCache[key] = cache
		braceletBraceletcategoryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletBraceletcategory record. See Update for
// whitelist behavior description.
func (o *BraceletBraceletcategory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletBraceletcategory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletBraceletcategory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletBraceletcategory, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletBraceletcategory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletBraceletcategory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletBraceletcategory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletBraceletcategoryUpdateCacheMut.RLock()
	cache, cached := braceletBraceletcategoryUpdateCache[key]
	braceletBraceletcategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletBraceletcategoryColumns, braceletBraceletcategoryPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_braceletcategory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_braceletcategory` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletBraceletcategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, append(wl, braceletBraceletcategoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_braceletcategory row")
	}

	if !cached {
		braceletBraceletcategoryUpdateCacheMut.Lock()
		braceletBraceletcategoryUpdateCache[key] = cache
		braceletBraceletcategoryUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletBraceletcategoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletBraceletcategoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_braceletcategory")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletBraceletcategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletcategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletcategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletBraceletcategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_braceletcategory` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletcategoryPrimaryKeyColumns), len(colNames)+1, len(braceletBraceletcategoryPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletBraceletcategory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletBraceletcategory) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletBraceletcategory) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletBraceletcategory) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletBraceletcategory) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletcategory provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletcategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletBraceletcategoryUpsertCacheMut.RLock()
	cache, cached := braceletBraceletcategoryUpsertCache[key]
	braceletBraceletcategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletBraceletcategoryColumns,
			braceletBraceletcategoryColumnsWithDefault,
			braceletBraceletcategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletBraceletcategoryColumns,
			braceletBraceletcategoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_braceletcategory, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_braceletcategory", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_braceletcategory` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletBraceletcategoryType, braceletBraceletcategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_braceletcategory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletcategoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletcategory")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletcategoryUpsertCacheMut.Lock()
		braceletBraceletcategoryUpsertCache[key] = cache
		braceletBraceletcategoryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletBraceletcategory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletcategory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletBraceletcategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletBraceletcategory) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcategory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletBraceletcategory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletcategory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletBraceletcategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletBraceletcategory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcategory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletBraceletcategoryPrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_braceletcategory` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_braceletcategory")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletBraceletcategoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletBraceletcategoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletBraceletcategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_braceletcategory")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletBraceletcategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletBraceletcategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcategory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletBraceletcategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletBraceletcategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcategory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_braceletcategory` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletcategoryPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletcategoryPrimaryKeyColumns), 1, len(braceletBraceletcategoryPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletBraceletcategory slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletBraceletcategory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletBraceletcategory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletBraceletcategory) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletcategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletBraceletcategory) Reload(exec boil.Executor) error {
	ret, err := FindBraceletBraceletcategory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletcategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletcategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletcategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletBraceletcategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletcategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletBraceletcategories := BraceletBraceletcategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletcategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_braceletcategory`.* FROM `bracelet_braceletcategory` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletcategoryPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletBraceletcategoryPrimaryKeyColumns), 1, len(braceletBraceletcategoryPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletBraceletcategories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletBraceletcategorySlice")
	}

	*o = braceletBraceletcategories

	return nil
}

// BraceletBraceletcategoryExists checks if the BraceletBraceletcategory row exists.
func BraceletBraceletcategoryExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_braceletcategory` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_braceletcategory exists")
	}

	return exists, nil
}

// BraceletBraceletcategoryExistsG checks if the BraceletBraceletcategory row exists.
func BraceletBraceletcategoryExistsG(id int) (bool, error) {
	return BraceletBraceletcategoryExists(boil.GetDB(), id)
}

// BraceletBraceletcategoryExistsGP checks if the BraceletBraceletcategory row exists. Panics on error.
func BraceletBraceletcategoryExistsGP(id int) bool {
	e, err := BraceletBraceletcategoryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletBraceletcategoryExistsP checks if the BraceletBraceletcategory row exists. Panics on error.
func BraceletBraceletcategoryExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletBraceletcategoryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
