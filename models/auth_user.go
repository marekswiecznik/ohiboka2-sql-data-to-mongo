// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// AuthUser is an object representing the database table.
type AuthUser struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username    string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	FirstName   string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName    string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email       string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password    string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	IsStaff     int8      `boil:"is_staff" json:"is_staff" toml:"is_staff" yaml:"is_staff"`
	IsActive    int8      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	IsSuperuser int8      `boil:"is_superuser" json:"is_superuser" toml:"is_superuser" yaml:"is_superuser"`
	LastLogin   null.Time `boil:"last_login" json:"last_login,omitempty" toml:"last_login" yaml:"last_login,omitempty"`
	DateJoined  time.Time `boil:"date_joined" json:"date_joined" toml:"date_joined" yaml:"date_joined"`

	R *authUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// authUserR is where relationships are stored.
type authUserR struct {
	UserCommonUserprofile       *CommonUserprofile
	UserAuthMessages            AuthMessageSlice
	UserAuthUserGroups          AuthUserGroupSlice
	UserAuthUserUserPermissions AuthUserUserPermissionSlice
	UserBraceletBracelets       BraceletBraceletSlice
	UserBraceletPhotos          BraceletPhotoSlice
	UserBraceletRates           BraceletRateSlice
	UserDjangoAdminLogs         DjangoAdminLogSlice
	UserDjangoCommentFlags      DjangoCommentFlagSlice
	UserDjangoComments          DjangoCommentSlice
}

// authUserL is where Load methods for each relationship are stored.
type authUserL struct{}

var (
	authUserColumns               = []string{"id", "username", "first_name", "last_name", "email", "password", "is_staff", "is_active", "is_superuser", "last_login", "date_joined"}
	authUserColumnsWithoutDefault = []string{"username", "first_name", "last_name", "email", "password", "is_staff", "is_active", "is_superuser", "last_login", "date_joined"}
	authUserColumnsWithDefault    = []string{"id"}
	authUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthUserSlice is an alias for a slice of pointers to AuthUser.
	// This should generally be used opposed to []AuthUser.
	AuthUserSlice []*AuthUser

	authUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authUserType                 = reflect.TypeOf(&AuthUser{})
	authUserMapping              = queries.MakeStructMapping(authUserType)
	authUserPrimaryKeyMapping, _ = queries.BindMapping(authUserType, authUserMapping, authUserPrimaryKeyColumns)
	authUserInsertCacheMut       sync.RWMutex
	authUserInsertCache          = make(map[string]insertCache)
	authUserUpdateCacheMut       sync.RWMutex
	authUserUpdateCache          = make(map[string]updateCache)
	authUserUpsertCacheMut       sync.RWMutex
	authUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single authUser record from the query, and panics on error.
func (q authUserQuery) OneP() *AuthUser {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authUser record from the query.
func (q authUserQuery) One() (*AuthUser, error) {
	o := &AuthUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_user")
	}

	return o, nil
}

// AllP returns all AuthUser records from the query, and panics on error.
func (q authUserQuery) AllP() AuthUserSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthUser records from the query.
func (q authUserQuery) All() (AuthUserSlice, error) {
	var o AuthUserSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthUser slice")
	}

	return o, nil
}

// CountP returns the count of all AuthUser records in the query, and panics on error.
func (q authUserQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthUser records in the query.
func (q authUserQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authUserQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authUserQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_user exists")
	}

	return count > 0, nil
}

// UserCommonUserprofileG pointed to by the foreign key.
func (o *AuthUser) UserCommonUserprofileG(mods ...qm.QueryMod) commonUserprofileQuery {
	return o.UserCommonUserprofile(boil.GetDB(), mods...)
}

// UserCommonUserprofile pointed to by the foreign key.
func (o *AuthUser) UserCommonUserprofile(exec boil.Executor, mods ...qm.QueryMod) commonUserprofileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := CommonUserprofiles(exec, queryMods...)
	queries.SetFrom(query.Query, "`common_userprofile`")

	return query
}

// UserAuthMessagesG retrieves all the auth_message's auth message via user_id column.
func (o *AuthUser) UserAuthMessagesG(mods ...qm.QueryMod) authMessageQuery {
	return o.UserAuthMessages(boil.GetDB(), mods...)
}

// UserAuthMessages retrieves all the auth_message's auth message with an executor via user_id column.
func (o *AuthUser) UserAuthMessages(exec boil.Executor, mods ...qm.QueryMod) authMessageQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := AuthMessages(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_message` as `a`")
	return query
}

// UserAuthUserGroupsG retrieves all the auth_user_group's auth user groups via user_id column.
func (o *AuthUser) UserAuthUserGroupsG(mods ...qm.QueryMod) authUserGroupQuery {
	return o.UserAuthUserGroups(boil.GetDB(), mods...)
}

// UserAuthUserGroups retrieves all the auth_user_group's auth user groups with an executor via user_id column.
func (o *AuthUser) UserAuthUserGroups(exec boil.Executor, mods ...qm.QueryMod) authUserGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := AuthUserGroups(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user_groups` as `a`")
	return query
}

// UserAuthUserUserPermissionsG retrieves all the auth_user_user_permission's auth user user permissions via user_id column.
func (o *AuthUser) UserAuthUserUserPermissionsG(mods ...qm.QueryMod) authUserUserPermissionQuery {
	return o.UserAuthUserUserPermissions(boil.GetDB(), mods...)
}

// UserAuthUserUserPermissions retrieves all the auth_user_user_permission's auth user user permissions with an executor via user_id column.
func (o *AuthUser) UserAuthUserUserPermissions(exec boil.Executor, mods ...qm.QueryMod) authUserUserPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := AuthUserUserPermissions(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user_user_permissions` as `a`")
	return query
}

// UserBraceletBraceletsG retrieves all the bracelet_bracelet's bracelet bracelet via user_id column.
func (o *AuthUser) UserBraceletBraceletsG(mods ...qm.QueryMod) braceletBraceletQuery {
	return o.UserBraceletBracelets(boil.GetDB(), mods...)
}

// UserBraceletBracelets retrieves all the bracelet_bracelet's bracelet bracelet with an executor via user_id column.
func (o *AuthUser) UserBraceletBracelets(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := BraceletBracelets(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_bracelet` as `a`")
	return query
}

// UserBraceletPhotosG retrieves all the bracelet_photo's bracelet photo via user_id column.
func (o *AuthUser) UserBraceletPhotosG(mods ...qm.QueryMod) braceletPhotoQuery {
	return o.UserBraceletPhotos(boil.GetDB(), mods...)
}

// UserBraceletPhotos retrieves all the bracelet_photo's bracelet photo with an executor via user_id column.
func (o *AuthUser) UserBraceletPhotos(exec boil.Executor, mods ...qm.QueryMod) braceletPhotoQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := BraceletPhotos(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_photo` as `a`")
	return query
}

// UserBraceletRatesG retrieves all the bracelet_rate's bracelet rate via user_id column.
func (o *AuthUser) UserBraceletRatesG(mods ...qm.QueryMod) braceletRateQuery {
	return o.UserBraceletRates(boil.GetDB(), mods...)
}

// UserBraceletRates retrieves all the bracelet_rate's bracelet rate with an executor via user_id column.
func (o *AuthUser) UserBraceletRates(exec boil.Executor, mods ...qm.QueryMod) braceletRateQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := BraceletRates(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_rate` as `a`")
	return query
}

// UserDjangoAdminLogsG retrieves all the django_admin_log's django admin log via user_id column.
func (o *AuthUser) UserDjangoAdminLogsG(mods ...qm.QueryMod) djangoAdminLogQuery {
	return o.UserDjangoAdminLogs(boil.GetDB(), mods...)
}

// UserDjangoAdminLogs retrieves all the django_admin_log's django admin log with an executor via user_id column.
func (o *AuthUser) UserDjangoAdminLogs(exec boil.Executor, mods ...qm.QueryMod) djangoAdminLogQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := DjangoAdminLogs(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_admin_log` as `a`")
	return query
}

// UserDjangoCommentFlagsG retrieves all the django_comment_flag's django comment flags via user_id column.
func (o *AuthUser) UserDjangoCommentFlagsG(mods ...qm.QueryMod) djangoCommentFlagQuery {
	return o.UserDjangoCommentFlags(boil.GetDB(), mods...)
}

// UserDjangoCommentFlags retrieves all the django_comment_flag's django comment flags with an executor via user_id column.
func (o *AuthUser) UserDjangoCommentFlags(exec boil.Executor, mods ...qm.QueryMod) djangoCommentFlagQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := DjangoCommentFlags(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_comment_flags` as `a`")
	return query
}

// UserDjangoCommentsG retrieves all the django_comment's django comments via user_id column.
func (o *AuthUser) UserDjangoCommentsG(mods ...qm.QueryMod) djangoCommentQuery {
	return o.UserDjangoComments(boil.GetDB(), mods...)
}

// UserDjangoComments retrieves all the django_comment's django comments with an executor via user_id column.
func (o *AuthUser) UserDjangoComments(exec boil.Executor, mods ...qm.QueryMod) djangoCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`user_id`=?", o.ID),
	)

	query := DjangoComments(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_comments` as `a`")
	return query
}

// LoadUserCommonUserprofile allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserCommonUserprofile(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `common_userprofile` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CommonUserprofile")
	}
	defer results.Close()

	var resultSlice []*CommonUserprofile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CommonUserprofile")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.UserCommonUserprofile = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.UserCommonUserprofile = foreign
				break
			}
		}
	}

	return nil
}

// LoadUserAuthMessages allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserAuthMessages(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_message` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_message")
	}
	defer results.Close()

	var resultSlice []*AuthMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_message")
	}

	if singular {
		object.R.UserAuthMessages = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAuthMessages = append(local.R.UserAuthMessages, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserAuthUserGroups allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserAuthUserGroups(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user_groups` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_groups")
	}
	defer results.Close()

	var resultSlice []*AuthUserGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_groups")
	}

	if singular {
		object.R.UserAuthUserGroups = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAuthUserGroups = append(local.R.UserAuthUserGroups, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserAuthUserUserPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserAuthUserUserPermissions(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user_user_permissions` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_user_permissions")
	}
	defer results.Close()

	var resultSlice []*AuthUserUserPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_user_permissions")
	}

	if singular {
		object.R.UserAuthUserUserPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAuthUserUserPermissions = append(local.R.UserAuthUserUserPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserBraceletBracelets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserBraceletBracelets(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_bracelet` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_bracelet")
	}
	defer results.Close()

	var resultSlice []*BraceletBracelet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_bracelet")
	}

	if singular {
		object.R.UserBraceletBracelets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserBraceletBracelets = append(local.R.UserBraceletBracelets, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserBraceletPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserBraceletPhotos(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_photo` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_photo")
	}
	defer results.Close()

	var resultSlice []*BraceletPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_photo")
	}

	if singular {
		object.R.UserBraceletPhotos = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserBraceletPhotos = append(local.R.UserBraceletPhotos, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserBraceletRates allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserBraceletRates(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_rate` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_rate")
	}
	defer results.Close()

	var resultSlice []*BraceletRate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_rate")
	}

	if singular {
		object.R.UserBraceletRates = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserBraceletRates = append(local.R.UserBraceletRates, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserDjangoAdminLogs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserDjangoAdminLogs(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_admin_log` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_admin_log")
	}
	defer results.Close()

	var resultSlice []*DjangoAdminLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_admin_log")
	}

	if singular {
		object.R.UserDjangoAdminLogs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserDjangoAdminLogs = append(local.R.UserDjangoAdminLogs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserDjangoCommentFlags allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserDjangoCommentFlags(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_comment_flags` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_comment_flags")
	}
	defer results.Close()

	var resultSlice []*DjangoCommentFlag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_comment_flags")
	}

	if singular {
		object.R.UserDjangoCommentFlags = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserDjangoCommentFlags = append(local.R.UserDjangoCommentFlags, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserDjangoComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserL) LoadUserDjangoComments(e boil.Executor, singular bool, maybeAuthUser interface{}) error {
	var slice []*AuthUser
	var object *AuthUser

	count := 1
	if singular {
		object = maybeAuthUser.(*AuthUser)
	} else {
		slice = *maybeAuthUser.(*AuthUserSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_comments` where `user_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_comments")
	}
	defer results.Close()

	var resultSlice []*DjangoComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_comments")
	}

	if singular {
		object.R.UserDjangoComments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID.Int {
				local.R.UserDjangoComments = append(local.R.UserDjangoComments, foreign)
				break
			}
		}
	}

	return nil
}

// SetUserCommonUserprofileG of the auth_user to the related item.
// Sets o.R.UserCommonUserprofile to related.
// Adds o to related.R.User.
// Uses the global database handle.
func (o *AuthUser) SetUserCommonUserprofileG(insert bool, related *CommonUserprofile) error {
	return o.SetUserCommonUserprofile(boil.GetDB(), insert, related)
}

// SetUserCommonUserprofileP of the auth_user to the related item.
// Sets o.R.UserCommonUserprofile to related.
// Adds o to related.R.User.
// Panics on error.
func (o *AuthUser) SetUserCommonUserprofileP(exec boil.Executor, insert bool, related *CommonUserprofile) {
	if err := o.SetUserCommonUserprofile(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserCommonUserprofileGP of the auth_user to the related item.
// Sets o.R.UserCommonUserprofile to related.
// Adds o to related.R.User.
// Uses the global database handle and panics on error.
func (o *AuthUser) SetUserCommonUserprofileGP(insert bool, related *CommonUserprofile) {
	if err := o.SetUserCommonUserprofile(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserCommonUserprofile of the auth_user to the related item.
// Sets o.R.UserCommonUserprofile to related.
// Adds o to related.R.User.
func (o *AuthUser) SetUserCommonUserprofile(exec boil.Executor, insert bool, related *CommonUserprofile) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `common_userprofile` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
			strmangle.WhereClause("`", "`", 0, commonUserprofilePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID

	}

	if o.R == nil {
		o.R = &authUserR{
			UserCommonUserprofile: related,
		}
	} else {
		o.R.UserCommonUserprofile = related
	}

	if related.R == nil {
		related.R = &commonUserprofileR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddUserAuthMessagesG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthMessages.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserAuthMessagesG(insert bool, related ...*AuthMessage) error {
	return o.AddUserAuthMessages(boil.GetDB(), insert, related...)
}

// AddUserAuthMessagesP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthMessages.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserAuthMessagesP(exec boil.Executor, insert bool, related ...*AuthMessage) {
	if err := o.AddUserAuthMessages(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthMessagesGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthMessages.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserAuthMessagesGP(insert bool, related ...*AuthMessage) {
	if err := o.AddUserAuthMessages(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthMessages adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthMessages.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserAuthMessages(exec boil.Executor, insert bool, related ...*AuthMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_message` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, authMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserAuthMessages: related,
		}
	} else {
		o.R.UserAuthMessages = append(o.R.UserAuthMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authMessageR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserAuthUserGroupsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserGroups.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserAuthUserGroupsG(insert bool, related ...*AuthUserGroup) error {
	return o.AddUserAuthUserGroups(boil.GetDB(), insert, related...)
}

// AddUserAuthUserGroupsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserGroups.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserAuthUserGroupsP(exec boil.Executor, insert bool, related ...*AuthUserGroup) {
	if err := o.AddUserAuthUserGroups(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthUserGroupsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserGroups.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserAuthUserGroupsGP(insert bool, related ...*AuthUserGroup) {
	if err := o.AddUserAuthUserGroups(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthUserGroups adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserGroups.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserAuthUserGroups(exec boil.Executor, insert bool, related ...*AuthUserGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_user_groups` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserAuthUserGroups: related,
		}
	} else {
		o.R.UserAuthUserGroups = append(o.R.UserAuthUserGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserGroupR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserAuthUserUserPermissionsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserUserPermissions.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserAuthUserUserPermissionsG(insert bool, related ...*AuthUserUserPermission) error {
	return o.AddUserAuthUserUserPermissions(boil.GetDB(), insert, related...)
}

// AddUserAuthUserUserPermissionsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserUserPermissions.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserAuthUserUserPermissionsP(exec boil.Executor, insert bool, related ...*AuthUserUserPermission) {
	if err := o.AddUserAuthUserUserPermissions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthUserUserPermissionsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserUserPermissions.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserAuthUserUserPermissionsGP(insert bool, related ...*AuthUserUserPermission) {
	if err := o.AddUserAuthUserUserPermissions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAuthUserUserPermissions adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserAuthUserUserPermissions.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserAuthUserUserPermissions(exec boil.Executor, insert bool, related ...*AuthUserUserPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_user_user_permissions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, authUserUserPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserAuthUserUserPermissions: related,
		}
	} else {
		o.R.UserAuthUserUserPermissions = append(o.R.UserAuthUserUserPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserUserPermissionR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserBraceletBraceletsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletBracelets.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserBraceletBraceletsG(insert bool, related ...*BraceletBracelet) error {
	return o.AddUserBraceletBracelets(boil.GetDB(), insert, related...)
}

// AddUserBraceletBraceletsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletBracelets.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserBraceletBraceletsP(exec boil.Executor, insert bool, related ...*BraceletBracelet) {
	if err := o.AddUserBraceletBracelets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletBraceletsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletBracelets.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserBraceletBraceletsGP(insert bool, related ...*BraceletBracelet) {
	if err := o.AddUserBraceletBracelets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletBracelets adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletBracelets.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserBraceletBracelets(exec boil.Executor, insert bool, related ...*BraceletBracelet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_bracelet` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserBraceletBracelets: related,
		}
	} else {
		o.R.UserBraceletBracelets = append(o.R.UserBraceletBracelets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserBraceletPhotosG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletPhotos.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserBraceletPhotosG(insert bool, related ...*BraceletPhoto) error {
	return o.AddUserBraceletPhotos(boil.GetDB(), insert, related...)
}

// AddUserBraceletPhotosP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletPhotos.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserBraceletPhotosP(exec boil.Executor, insert bool, related ...*BraceletPhoto) {
	if err := o.AddUserBraceletPhotos(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletPhotosGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletPhotos.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserBraceletPhotosGP(insert bool, related ...*BraceletPhoto) {
	if err := o.AddUserBraceletPhotos(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletPhotos adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletPhotos.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserBraceletPhotos(exec boil.Executor, insert bool, related ...*BraceletPhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_photo` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserBraceletPhotos: related,
		}
	} else {
		o.R.UserBraceletPhotos = append(o.R.UserBraceletPhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletPhotoR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserBraceletRatesG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletRates.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserBraceletRatesG(insert bool, related ...*BraceletRate) error {
	return o.AddUserBraceletRates(boil.GetDB(), insert, related...)
}

// AddUserBraceletRatesP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletRates.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserBraceletRatesP(exec boil.Executor, insert bool, related ...*BraceletRate) {
	if err := o.AddUserBraceletRates(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletRatesGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletRates.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserBraceletRatesGP(insert bool, related ...*BraceletRate) {
	if err := o.AddUserBraceletRates(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserBraceletRates adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserBraceletRates.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserBraceletRates(exec boil.Executor, insert bool, related ...*BraceletRate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_rate` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, braceletRatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserBraceletRates: related,
		}
	} else {
		o.R.UserBraceletRates = append(o.R.UserBraceletRates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletRateR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserDjangoAdminLogsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoAdminLogs.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserDjangoAdminLogsG(insert bool, related ...*DjangoAdminLog) error {
	return o.AddUserDjangoAdminLogs(boil.GetDB(), insert, related...)
}

// AddUserDjangoAdminLogsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoAdminLogs.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserDjangoAdminLogsP(exec boil.Executor, insert bool, related ...*DjangoAdminLog) {
	if err := o.AddUserDjangoAdminLogs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoAdminLogsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoAdminLogs.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserDjangoAdminLogsGP(insert bool, related ...*DjangoAdminLog) {
	if err := o.AddUserDjangoAdminLogs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoAdminLogs adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoAdminLogs.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_admin_log` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, djangoAdminLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserDjangoAdminLogs: related,
		}
	} else {
		o.R.UserDjangoAdminLogs = append(o.R.UserDjangoAdminLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoAdminLogR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserDjangoCommentFlagsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoCommentFlags.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserDjangoCommentFlagsG(insert bool, related ...*DjangoCommentFlag) error {
	return o.AddUserDjangoCommentFlags(boil.GetDB(), insert, related...)
}

// AddUserDjangoCommentFlagsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoCommentFlags.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserDjangoCommentFlagsP(exec boil.Executor, insert bool, related ...*DjangoCommentFlag) {
	if err := o.AddUserDjangoCommentFlags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoCommentFlagsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoCommentFlags.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserDjangoCommentFlagsGP(insert bool, related ...*DjangoCommentFlag) {
	if err := o.AddUserDjangoCommentFlags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoCommentFlags adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoCommentFlags.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserDjangoCommentFlags(exec boil.Executor, insert bool, related ...*DjangoCommentFlag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_comment_flags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, djangoCommentFlagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserDjangoCommentFlags: related,
		}
	} else {
		o.R.UserDjangoCommentFlags = append(o.R.UserDjangoCommentFlags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCommentFlagR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserDjangoCommentsG adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoComments.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AuthUser) AddUserDjangoCommentsG(insert bool, related ...*DjangoComment) error {
	return o.AddUserDjangoComments(boil.GetDB(), insert, related...)
}

// AddUserDjangoCommentsP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoComments.
// Sets related.R.User appropriately.
// Panics on error.
func (o *AuthUser) AddUserDjangoCommentsP(exec boil.Executor, insert bool, related ...*DjangoComment) {
	if err := o.AddUserDjangoComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoCommentsGP adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoComments.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *AuthUser) AddUserDjangoCommentsGP(insert bool, related ...*DjangoComment) {
	if err := o.AddUserDjangoComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserDjangoComments adds the given related objects to the existing relationships
// of the auth_user, optionally inserting them as new records.
// Appends related to o.R.UserDjangoComments.
// Sets related.R.User appropriately.
func (o *AuthUser) AddUserDjangoComments(exec boil.Executor, insert bool, related ...*DjangoComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, djangoCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID.Int = o.ID
			rel.UserID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &authUserR{
			UserDjangoComments: related,
		}
	} else {
		o.R.UserDjangoComments = append(o.R.UserDjangoComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCommentR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// SetUserDjangoCommentsG removes all previously related items of the
// auth_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserDjangoComments accordingly.
// Replaces o.R.UserDjangoComments with related.
// Sets related.R.User's UserDjangoComments accordingly.
// Uses the global database handle.
func (o *AuthUser) SetUserDjangoCommentsG(insert bool, related ...*DjangoComment) error {
	return o.SetUserDjangoComments(boil.GetDB(), insert, related...)
}

// SetUserDjangoCommentsP removes all previously related items of the
// auth_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserDjangoComments accordingly.
// Replaces o.R.UserDjangoComments with related.
// Sets related.R.User's UserDjangoComments accordingly.
// Panics on error.
func (o *AuthUser) SetUserDjangoCommentsP(exec boil.Executor, insert bool, related ...*DjangoComment) {
	if err := o.SetUserDjangoComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserDjangoCommentsGP removes all previously related items of the
// auth_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserDjangoComments accordingly.
// Replaces o.R.UserDjangoComments with related.
// Sets related.R.User's UserDjangoComments accordingly.
// Uses the global database handle and panics on error.
func (o *AuthUser) SetUserDjangoCommentsGP(insert bool, related ...*DjangoComment) {
	if err := o.SetUserDjangoComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserDjangoComments removes all previously related items of the
// auth_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.User's UserDjangoComments accordingly.
// Replaces o.R.UserDjangoComments with related.
// Sets related.R.User's UserDjangoComments accordingly.
func (o *AuthUser) SetUserDjangoComments(exec boil.Executor, insert bool, related ...*DjangoComment) error {
	query := "update `django_comments` set `user_id` = null where `user_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserDjangoComments {
			rel.UserID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.User = nil
		}

		o.R.UserDjangoComments = nil
	}
	return o.AddUserDjangoComments(exec, insert, related...)
}

// RemoveUserDjangoCommentsG relationships from objects passed in.
// Removes related items from R.UserDjangoComments (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle.
func (o *AuthUser) RemoveUserDjangoCommentsG(related ...*DjangoComment) error {
	return o.RemoveUserDjangoComments(boil.GetDB(), related...)
}

// RemoveUserDjangoCommentsP relationships from objects passed in.
// Removes related items from R.UserDjangoComments (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Panics on error.
func (o *AuthUser) RemoveUserDjangoCommentsP(exec boil.Executor, related ...*DjangoComment) {
	if err := o.RemoveUserDjangoComments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUserDjangoCommentsGP relationships from objects passed in.
// Removes related items from R.UserDjangoComments (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
// Uses the global database handle and panics on error.
func (o *AuthUser) RemoveUserDjangoCommentsGP(related ...*DjangoComment) {
	if err := o.RemoveUserDjangoComments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUserDjangoComments relationships from objects passed in.
// Removes related items from R.UserDjangoComments (uses pointer comparison, removal does not keep order)
// Sets related.R.User.
func (o *AuthUser) RemoveUserDjangoComments(exec boil.Executor, related ...*DjangoComment) error {
	var err error
	for _, rel := range related {
		rel.UserID.Valid = false
		if rel.R != nil {
			rel.R.User = nil
		}
		if err = rel.Update(exec, "user_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserDjangoComments {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserDjangoComments)
			if ln > 1 && i < ln-1 {
				o.R.UserDjangoComments[i] = o.R.UserDjangoComments[ln-1]
			}
			o.R.UserDjangoComments = o.R.UserDjangoComments[:ln-1]
			break
		}
	}

	return nil
}

// AuthUsersG retrieves all records.
func AuthUsersG(mods ...qm.QueryMod) authUserQuery {
	return AuthUsers(boil.GetDB(), mods...)
}

// AuthUsers retrieves all the records using an executor.
func AuthUsers(exec boil.Executor, mods ...qm.QueryMod) authUserQuery {
	mods = append(mods, qm.From("`auth_user`"))
	return authUserQuery{NewQuery(exec, mods...)}
}

// FindAuthUserG retrieves a single record by ID.
func FindAuthUserG(id int, selectCols ...string) (*AuthUser, error) {
	return FindAuthUser(boil.GetDB(), id, selectCols...)
}

// FindAuthUserGP retrieves a single record by ID, and panics on error.
func FindAuthUserGP(id int, selectCols ...string) *AuthUser {
	retobj, err := FindAuthUser(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAuthUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthUser(exec boil.Executor, id int, selectCols ...string) (*AuthUser, error) {
	authUserObj := &AuthUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth_user` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(authUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_user")
	}

	return authUserObj, nil
}

// FindAuthUserP retrieves a single record by ID with an executor, and panics on error.
func FindAuthUserP(exec boil.Executor, id int, selectCols ...string) *AuthUser {
	retobj, err := FindAuthUser(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthUser) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthUser) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthUser) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthUser) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authUserColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authUserInsertCacheMut.RLock()
	cache, cached := authUserInsertCache[key]
	authUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authUserColumns,
			authUserColumnsWithDefault,
			authUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authUserType, authUserMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `auth_user` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authUserPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authUserMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_user")
	}

CacheNoHooks:
	if !cached {
		authUserInsertCacheMut.Lock()
		authUserInsertCache[key] = cache
		authUserInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AuthUser record. See Update for
// whitelist behavior description.
func (o *AuthUser) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AuthUser record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AuthUser) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AuthUser, and panics on error.
// See Update for whitelist behavior description.
func (o *AuthUser) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AuthUser.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AuthUser) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	authUserUpdateCacheMut.RLock()
	cache, cached := authUserUpdateCache[key]
	authUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(authUserColumns, authUserPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update auth_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, append(wl, authUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update auth_user row")
	}

	if !cached {
		authUserUpdateCacheMut.Lock()
		authUserUpdateCache[key] = cache
		authUserUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q authUserQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q authUserQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for auth_user")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthUserSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AuthUserSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AuthUserSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthUserSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `auth_user` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authUserPrimaryKeyColumns), len(colNames)+1, len(authUserPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in authUser slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthUser) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AuthUser) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AuthUser) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AuthUser) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_user provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authUserUpsertCacheMut.RLock()
	cache, cached := authUserUpsertCache[key]
	authUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			authUserColumns,
			authUserColumnsWithDefault,
			authUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			authUserColumns,
			authUserPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert auth_user, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "auth_user", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth_user` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(authUserType, authUserMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authUserType, authUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authUserMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_user")
	}

CacheNoHooks:
	if !cached {
		authUserUpsertCacheMut.Lock()
		authUserUpsertCache[key] = cache
		authUserUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single AuthUser record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthUser) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AuthUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthUser) DeleteG() error {
	if o == nil {
		return errors.New("models: no AuthUser provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AuthUser record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthUser) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AuthUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthUser) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authUserPrimaryKeyMapping)
	sql := "DELETE FROM `auth_user` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from auth_user")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q authUserQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q authUserQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no authUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from auth_user")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AuthUserSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AuthUserSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AuthUser slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AuthUserSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthUserSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthUser slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `auth_user` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authUserPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authUserPrimaryKeyColumns), 1, len(authUserPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from authUser slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AuthUser) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AuthUser) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthUser) ReloadG() error {
	if o == nil {
		return errors.New("models: no AuthUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthUser) Reload(exec boil.Executor) error {
	ret, err := FindAuthUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthUserSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthUserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AuthUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	authUsers := AuthUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `auth_user`.* FROM `auth_user` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authUserPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(authUserPrimaryKeyColumns), 1, len(authUserPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&authUsers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthUserSlice")
	}

	*o = authUsers

	return nil
}

// AuthUserExists checks if the AuthUser row exists.
func AuthUserExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `auth_user` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_user exists")
	}

	return exists, nil
}

// AuthUserExistsG checks if the AuthUser row exists.
func AuthUserExistsG(id int) (bool, error) {
	return AuthUserExists(boil.GetDB(), id)
}

// AuthUserExistsGP checks if the AuthUser row exists. Panics on error.
func AuthUserExistsGP(id int) bool {
	e, err := AuthUserExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AuthUserExistsP checks if the AuthUser row exists. Panics on error.
func AuthUserExistsP(exec boil.Executor, id int) bool {
	e, err := AuthUserExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
