// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// AuthGroup is an object representing the database table.
type AuthGroup struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *authGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// authGroupR is where relationships are stored.
type authGroupR struct {
	GroupAuthGroupPermissions AuthGroupPermissionSlice
	GroupAuthUserGroups       AuthUserGroupSlice
}

// authGroupL is where Load methods for each relationship are stored.
type authGroupL struct{}

var (
	authGroupColumns               = []string{"id", "name"}
	authGroupColumnsWithoutDefault = []string{"name"}
	authGroupColumnsWithDefault    = []string{"id"}
	authGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthGroupSlice is an alias for a slice of pointers to AuthGroup.
	// This should generally be used opposed to []AuthGroup.
	AuthGroupSlice []*AuthGroup

	authGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authGroupType                 = reflect.TypeOf(&AuthGroup{})
	authGroupMapping              = queries.MakeStructMapping(authGroupType)
	authGroupPrimaryKeyMapping, _ = queries.BindMapping(authGroupType, authGroupMapping, authGroupPrimaryKeyColumns)
	authGroupInsertCacheMut       sync.RWMutex
	authGroupInsertCache          = make(map[string]insertCache)
	authGroupUpdateCacheMut       sync.RWMutex
	authGroupUpdateCache          = make(map[string]updateCache)
	authGroupUpsertCacheMut       sync.RWMutex
	authGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single authGroup record from the query, and panics on error.
func (q authGroupQuery) OneP() *AuthGroup {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authGroup record from the query.
func (q authGroupQuery) One() (*AuthGroup, error) {
	o := &AuthGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_group")
	}

	return o, nil
}

// AllP returns all AuthGroup records from the query, and panics on error.
func (q authGroupQuery) AllP() AuthGroupSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthGroup records from the query.
func (q authGroupQuery) All() (AuthGroupSlice, error) {
	var o AuthGroupSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthGroup slice")
	}

	return o, nil
}

// CountP returns the count of all AuthGroup records in the query, and panics on error.
func (q authGroupQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthGroup records in the query.
func (q authGroupQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_group rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authGroupQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authGroupQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_group exists")
	}

	return count > 0, nil
}

// GroupAuthGroupPermissionsG retrieves all the auth_group_permission's auth group permissions via group_id column.
func (o *AuthGroup) GroupAuthGroupPermissionsG(mods ...qm.QueryMod) authGroupPermissionQuery {
	return o.GroupAuthGroupPermissions(boil.GetDB(), mods...)
}

// GroupAuthGroupPermissions retrieves all the auth_group_permission's auth group permissions with an executor via group_id column.
func (o *AuthGroup) GroupAuthGroupPermissions(exec boil.Executor, mods ...qm.QueryMod) authGroupPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`group_id`=?", o.ID),
	)

	query := AuthGroupPermissions(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_group_permissions` as `a`")
	return query
}

// GroupAuthUserGroupsG retrieves all the auth_user_group's auth user groups via group_id column.
func (o *AuthGroup) GroupAuthUserGroupsG(mods ...qm.QueryMod) authUserGroupQuery {
	return o.GroupAuthUserGroups(boil.GetDB(), mods...)
}

// GroupAuthUserGroups retrieves all the auth_user_group's auth user groups with an executor via group_id column.
func (o *AuthGroup) GroupAuthUserGroups(exec boil.Executor, mods ...qm.QueryMod) authUserGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`group_id`=?", o.ID),
	)

	query := AuthUserGroups(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user_groups` as `a`")
	return query
}

// LoadGroupAuthGroupPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authGroupL) LoadGroupAuthGroupPermissions(e boil.Executor, singular bool, maybeAuthGroup interface{}) error {
	var slice []*AuthGroup
	var object *AuthGroup

	count := 1
	if singular {
		object = maybeAuthGroup.(*AuthGroup)
	} else {
		slice = *maybeAuthGroup.(*AuthGroupSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authGroupR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authGroupR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_group_permissions` where `group_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_group_permissions")
	}
	defer results.Close()

	var resultSlice []*AuthGroupPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_group_permissions")
	}

	if singular {
		object.R.GroupAuthGroupPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupAuthGroupPermissions = append(local.R.GroupAuthGroupPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadGroupAuthUserGroups allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authGroupL) LoadGroupAuthUserGroups(e boil.Executor, singular bool, maybeAuthGroup interface{}) error {
	var slice []*AuthGroup
	var object *AuthGroup

	count := 1
	if singular {
		object = maybeAuthGroup.(*AuthGroup)
	} else {
		slice = *maybeAuthGroup.(*AuthGroupSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authGroupR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authGroupR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user_groups` where `group_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_groups")
	}
	defer results.Close()

	var resultSlice []*AuthUserGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_groups")
	}

	if singular {
		object.R.GroupAuthUserGroups = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupAuthUserGroups = append(local.R.GroupAuthUserGroups, foreign)
				break
			}
		}
	}

	return nil
}

// AddGroupAuthGroupPermissionsG adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthGroupPermissions.
// Sets related.R.Group appropriately.
// Uses the global database handle.
func (o *AuthGroup) AddGroupAuthGroupPermissionsG(insert bool, related ...*AuthGroupPermission) error {
	return o.AddGroupAuthGroupPermissions(boil.GetDB(), insert, related...)
}

// AddGroupAuthGroupPermissionsP adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthGroupPermissions.
// Sets related.R.Group appropriately.
// Panics on error.
func (o *AuthGroup) AddGroupAuthGroupPermissionsP(exec boil.Executor, insert bool, related ...*AuthGroupPermission) {
	if err := o.AddGroupAuthGroupPermissions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGroupAuthGroupPermissionsGP adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthGroupPermissions.
// Sets related.R.Group appropriately.
// Uses the global database handle and panics on error.
func (o *AuthGroup) AddGroupAuthGroupPermissionsGP(insert bool, related ...*AuthGroupPermission) {
	if err := o.AddGroupAuthGroupPermissions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGroupAuthGroupPermissions adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthGroupPermissions.
// Sets related.R.Group appropriately.
func (o *AuthGroup) AddGroupAuthGroupPermissions(exec boil.Executor, insert bool, related ...*AuthGroupPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_group_permissions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, authGroupPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authGroupR{
			GroupAuthGroupPermissions: related,
		}
	} else {
		o.R.GroupAuthGroupPermissions = append(o.R.GroupAuthGroupPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authGroupPermissionR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AddGroupAuthUserGroupsG adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthUserGroups.
// Sets related.R.Group appropriately.
// Uses the global database handle.
func (o *AuthGroup) AddGroupAuthUserGroupsG(insert bool, related ...*AuthUserGroup) error {
	return o.AddGroupAuthUserGroups(boil.GetDB(), insert, related...)
}

// AddGroupAuthUserGroupsP adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthUserGroups.
// Sets related.R.Group appropriately.
// Panics on error.
func (o *AuthGroup) AddGroupAuthUserGroupsP(exec boil.Executor, insert bool, related ...*AuthUserGroup) {
	if err := o.AddGroupAuthUserGroups(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGroupAuthUserGroupsGP adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthUserGroups.
// Sets related.R.Group appropriately.
// Uses the global database handle and panics on error.
func (o *AuthGroup) AddGroupAuthUserGroupsGP(insert bool, related ...*AuthUserGroup) {
	if err := o.AddGroupAuthUserGroups(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGroupAuthUserGroups adds the given related objects to the existing relationships
// of the auth_group, optionally inserting them as new records.
// Appends related to o.R.GroupAuthUserGroups.
// Sets related.R.Group appropriately.
func (o *AuthGroup) AddGroupAuthUserGroups(exec boil.Executor, insert bool, related ...*AuthUserGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_user_groups` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authGroupR{
			GroupAuthUserGroups: related,
		}
	} else {
		o.R.GroupAuthUserGroups = append(o.R.GroupAuthUserGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserGroupR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AuthGroupsG retrieves all records.
func AuthGroupsG(mods ...qm.QueryMod) authGroupQuery {
	return AuthGroups(boil.GetDB(), mods...)
}

// AuthGroups retrieves all the records using an executor.
func AuthGroups(exec boil.Executor, mods ...qm.QueryMod) authGroupQuery {
	mods = append(mods, qm.From("`auth_group`"))
	return authGroupQuery{NewQuery(exec, mods...)}
}

// FindAuthGroupG retrieves a single record by ID.
func FindAuthGroupG(id int, selectCols ...string) (*AuthGroup, error) {
	return FindAuthGroup(boil.GetDB(), id, selectCols...)
}

// FindAuthGroupGP retrieves a single record by ID, and panics on error.
func FindAuthGroupGP(id int, selectCols ...string) *AuthGroup {
	retobj, err := FindAuthGroup(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAuthGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthGroup(exec boil.Executor, id int, selectCols ...string) (*AuthGroup, error) {
	authGroupObj := &AuthGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth_group` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(authGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_group")
	}

	return authGroupObj, nil
}

// FindAuthGroupP retrieves a single record by ID with an executor, and panics on error.
func FindAuthGroupP(exec boil.Executor, id int, selectCols ...string) *AuthGroup {
	retobj, err := FindAuthGroup(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthGroup) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthGroup) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthGroup) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthGroup) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_group provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authGroupColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authGroupInsertCacheMut.RLock()
	cache, cached := authGroupInsertCache[key]
	authGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authGroupColumns,
			authGroupColumnsWithDefault,
			authGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authGroupType, authGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `auth_group` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth_group` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authGroupPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_group")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authGroupMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_group")
	}

CacheNoHooks:
	if !cached {
		authGroupInsertCacheMut.Lock()
		authGroupInsertCache[key] = cache
		authGroupInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AuthGroup record. See Update for
// whitelist behavior description.
func (o *AuthGroup) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AuthGroup record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AuthGroup) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AuthGroup, and panics on error.
// See Update for whitelist behavior description.
func (o *AuthGroup) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AuthGroup.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AuthGroup) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	authGroupUpdateCacheMut.RLock()
	cache, cached := authGroupUpdateCache[key]
	authGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(authGroupColumns, authGroupPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update auth_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth_group` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, append(wl, authGroupPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update auth_group row")
	}

	if !cached {
		authGroupUpdateCacheMut.Lock()
		authGroupUpdateCache[key] = cache
		authGroupUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q authGroupQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q authGroupQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for auth_group")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthGroupSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AuthGroupSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AuthGroupSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthGroupSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `auth_group` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authGroupPrimaryKeyColumns), len(colNames)+1, len(authGroupPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in authGroup slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthGroup) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AuthGroup) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AuthGroup) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AuthGroup) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_group provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authGroupUpsertCacheMut.RLock()
	cache, cached := authGroupUpsertCache[key]
	authGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			authGroupColumns,
			authGroupColumnsWithDefault,
			authGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			authGroupColumns,
			authGroupPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert auth_group, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "auth_group", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth_group` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(authGroupType, authGroupMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authGroupType, authGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth_group")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authGroupMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_group")
	}

CacheNoHooks:
	if !cached {
		authGroupUpsertCacheMut.Lock()
		authGroupUpsertCache[key] = cache
		authGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single AuthGroup record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthGroup) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AuthGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthGroup) DeleteG() error {
	if o == nil {
		return errors.New("models: no AuthGroup provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AuthGroup record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthGroup) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AuthGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthGroup) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authGroupPrimaryKeyMapping)
	sql := "DELETE FROM `auth_group` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from auth_group")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q authGroupQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q authGroupQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no authGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from auth_group")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AuthGroupSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AuthGroupSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AuthGroup slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AuthGroupSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthGroupSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `auth_group` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authGroupPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authGroupPrimaryKeyColumns), 1, len(authGroupPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from authGroup slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AuthGroup) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AuthGroup) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthGroup) ReloadG() error {
	if o == nil {
		return errors.New("models: no AuthGroup provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthGroup) Reload(exec boil.Executor) error {
	ret, err := FindAuthGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthGroupSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthGroupSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthGroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AuthGroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	authGroups := AuthGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `auth_group`.* FROM `auth_group` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authGroupPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(authGroupPrimaryKeyColumns), 1, len(authGroupPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&authGroups)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthGroupSlice")
	}

	*o = authGroups

	return nil
}

// AuthGroupExists checks if the AuthGroup row exists.
func AuthGroupExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `auth_group` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_group exists")
	}

	return exists, nil
}

// AuthGroupExistsG checks if the AuthGroup row exists.
func AuthGroupExistsG(id int) (bool, error) {
	return AuthGroupExists(boil.GetDB(), id)
}

// AuthGroupExistsGP checks if the AuthGroup row exists. Panics on error.
func AuthGroupExistsGP(id int) bool {
	e, err := AuthGroupExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AuthGroupExistsP checks if the AuthGroup row exists. Panics on error.
func AuthGroupExistsP(exec boil.Executor, id int) bool {
	e, err := AuthGroupExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
