// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// DjangoSite is an object representing the database table.
type DjangoSite struct {
	ID     int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Domain string `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Name   string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *djangoSiteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoSiteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// djangoSiteR is where relationships are stored.
type djangoSiteR struct {
	SiteDjangoComments DjangoCommentSlice
}

// djangoSiteL is where Load methods for each relationship are stored.
type djangoSiteL struct{}

var (
	djangoSiteColumns               = []string{"id", "domain", "name"}
	djangoSiteColumnsWithoutDefault = []string{"domain", "name"}
	djangoSiteColumnsWithDefault    = []string{"id"}
	djangoSitePrimaryKeyColumns     = []string{"id"}
)

type (
	// DjangoSiteSlice is an alias for a slice of pointers to DjangoSite.
	// This should generally be used opposed to []DjangoSite.
	DjangoSiteSlice []*DjangoSite

	djangoSiteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoSiteType                 = reflect.TypeOf(&DjangoSite{})
	djangoSiteMapping              = queries.MakeStructMapping(djangoSiteType)
	djangoSitePrimaryKeyMapping, _ = queries.BindMapping(djangoSiteType, djangoSiteMapping, djangoSitePrimaryKeyColumns)
	djangoSiteInsertCacheMut       sync.RWMutex
	djangoSiteInsertCache          = make(map[string]insertCache)
	djangoSiteUpdateCacheMut       sync.RWMutex
	djangoSiteUpdateCache          = make(map[string]updateCache)
	djangoSiteUpsertCacheMut       sync.RWMutex
	djangoSiteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single djangoSite record from the query, and panics on error.
func (q djangoSiteQuery) OneP() *DjangoSite {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single djangoSite record from the query.
func (q djangoSiteQuery) One() (*DjangoSite, error) {
	o := &DjangoSite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_site")
	}

	return o, nil
}

// AllP returns all DjangoSite records from the query, and panics on error.
func (q djangoSiteQuery) AllP() DjangoSiteSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all DjangoSite records from the query.
func (q djangoSiteQuery) All() (DjangoSiteSlice, error) {
	var o DjangoSiteSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoSite slice")
	}

	return o, nil
}

// CountP returns the count of all DjangoSite records in the query, and panics on error.
func (q djangoSiteQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all DjangoSite records in the query.
func (q djangoSiteQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_site rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q djangoSiteQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q djangoSiteQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_site exists")
	}

	return count > 0, nil
}

// SiteDjangoCommentsG retrieves all the django_comment's django comments via site_id column.
func (o *DjangoSite) SiteDjangoCommentsG(mods ...qm.QueryMod) djangoCommentQuery {
	return o.SiteDjangoComments(boil.GetDB(), mods...)
}

// SiteDjangoComments retrieves all the django_comment's django comments with an executor via site_id column.
func (o *DjangoSite) SiteDjangoComments(exec boil.Executor, mods ...qm.QueryMod) djangoCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`site_id`=?", o.ID),
	)

	query := DjangoComments(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_comments` as `a`")
	return query
}

// LoadSiteDjangoComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoSiteL) LoadSiteDjangoComments(e boil.Executor, singular bool, maybeDjangoSite interface{}) error {
	var slice []*DjangoSite
	var object *DjangoSite

	count := 1
	if singular {
		object = maybeDjangoSite.(*DjangoSite)
	} else {
		slice = *maybeDjangoSite.(*DjangoSiteSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoSiteR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoSiteR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_comments` where `site_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_comments")
	}
	defer results.Close()

	var resultSlice []*DjangoComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_comments")
	}

	if singular {
		object.R.SiteDjangoComments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SiteID {
				local.R.SiteDjangoComments = append(local.R.SiteDjangoComments, foreign)
				break
			}
		}
	}

	return nil
}

// AddSiteDjangoCommentsG adds the given related objects to the existing relationships
// of the django_site, optionally inserting them as new records.
// Appends related to o.R.SiteDjangoComments.
// Sets related.R.Site appropriately.
// Uses the global database handle.
func (o *DjangoSite) AddSiteDjangoCommentsG(insert bool, related ...*DjangoComment) error {
	return o.AddSiteDjangoComments(boil.GetDB(), insert, related...)
}

// AddSiteDjangoCommentsP adds the given related objects to the existing relationships
// of the django_site, optionally inserting them as new records.
// Appends related to o.R.SiteDjangoComments.
// Sets related.R.Site appropriately.
// Panics on error.
func (o *DjangoSite) AddSiteDjangoCommentsP(exec boil.Executor, insert bool, related ...*DjangoComment) {
	if err := o.AddSiteDjangoComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSiteDjangoCommentsGP adds the given related objects to the existing relationships
// of the django_site, optionally inserting them as new records.
// Appends related to o.R.SiteDjangoComments.
// Sets related.R.Site appropriately.
// Uses the global database handle and panics on error.
func (o *DjangoSite) AddSiteDjangoCommentsGP(insert bool, related ...*DjangoComment) {
	if err := o.AddSiteDjangoComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSiteDjangoComments adds the given related objects to the existing relationships
// of the django_site, optionally inserting them as new records.
// Appends related to o.R.SiteDjangoComments.
// Sets related.R.Site appropriately.
func (o *DjangoSite) AddSiteDjangoComments(exec boil.Executor, insert bool, related ...*DjangoComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SiteID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"site_id"}),
				strmangle.WhereClause("`", "`", 0, djangoCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SiteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &djangoSiteR{
			SiteDjangoComments: related,
		}
	} else {
		o.R.SiteDjangoComments = append(o.R.SiteDjangoComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCommentR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// DjangoSitesG retrieves all records.
func DjangoSitesG(mods ...qm.QueryMod) djangoSiteQuery {
	return DjangoSites(boil.GetDB(), mods...)
}

// DjangoSites retrieves all the records using an executor.
func DjangoSites(exec boil.Executor, mods ...qm.QueryMod) djangoSiteQuery {
	mods = append(mods, qm.From("`django_site`"))
	return djangoSiteQuery{NewQuery(exec, mods...)}
}

// FindDjangoSiteG retrieves a single record by ID.
func FindDjangoSiteG(id int, selectCols ...string) (*DjangoSite, error) {
	return FindDjangoSite(boil.GetDB(), id, selectCols...)
}

// FindDjangoSiteGP retrieves a single record by ID, and panics on error.
func FindDjangoSiteGP(id int, selectCols ...string) *DjangoSite {
	retobj, err := FindDjangoSite(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDjangoSite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoSite(exec boil.Executor, id int, selectCols ...string) (*DjangoSite, error) {
	djangoSiteObj := &DjangoSite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `django_site` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(djangoSiteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_site")
	}

	return djangoSiteObj, nil
}

// FindDjangoSiteP retrieves a single record by ID with an executor, and panics on error.
func FindDjangoSiteP(exec boil.Executor, id int, selectCols ...string) *DjangoSite {
	retobj, err := FindDjangoSite(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DjangoSite) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *DjangoSite) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *DjangoSite) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *DjangoSite) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_site provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoSiteColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	djangoSiteInsertCacheMut.RLock()
	cache, cached := djangoSiteInsertCache[key]
	djangoSiteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			djangoSiteColumns,
			djangoSiteColumnsWithDefault,
			djangoSiteColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(djangoSiteType, djangoSiteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoSiteType, djangoSiteMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `django_site` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `django_site` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, djangoSitePrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_site")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoSiteMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_site")
	}

CacheNoHooks:
	if !cached {
		djangoSiteInsertCacheMut.Lock()
		djangoSiteInsertCache[key] = cache
		djangoSiteInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DjangoSite record. See Update for
// whitelist behavior description.
func (o *DjangoSite) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single DjangoSite record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *DjangoSite) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the DjangoSite, and panics on error.
// See Update for whitelist behavior description.
func (o *DjangoSite) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the DjangoSite.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *DjangoSite) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	djangoSiteUpdateCacheMut.RLock()
	cache, cached := djangoSiteUpdateCache[key]
	djangoSiteUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(djangoSiteColumns, djangoSitePrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update django_site, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `django_site` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, djangoSitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoSiteType, djangoSiteMapping, append(wl, djangoSitePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update django_site row")
	}

	if !cached {
		djangoSiteUpdateCacheMut.Lock()
		djangoSiteUpdateCache[key] = cache
		djangoSiteUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q djangoSiteQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q djangoSiteQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for django_site")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DjangoSiteSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DjangoSiteSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DjangoSiteSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoSiteSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `django_site` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoSitePrimaryKeyColumns), len(colNames)+1, len(djangoSitePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in djangoSite slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DjangoSite) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *DjangoSite) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *DjangoSite) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DjangoSite) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_site provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoSiteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoSiteUpsertCacheMut.RLock()
	cache, cached := djangoSiteUpsertCache[key]
	djangoSiteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			djangoSiteColumns,
			djangoSiteColumnsWithDefault,
			djangoSiteColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			djangoSiteColumns,
			djangoSitePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert django_site, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "django_site", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `django_site` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(djangoSiteType, djangoSiteMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoSiteType, djangoSiteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for django_site")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoSiteMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_site")
	}

CacheNoHooks:
	if !cached {
		djangoSiteUpsertCacheMut.Lock()
		djangoSiteUpsertCache[key] = cache
		djangoSiteUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single DjangoSite record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoSite) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single DjangoSite record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DjangoSite) DeleteG() error {
	if o == nil {
		return errors.New("models: no DjangoSite provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single DjangoSite record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoSite) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single DjangoSite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoSite) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoSite provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoSitePrimaryKeyMapping)
	sql := "DELETE FROM `django_site` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from django_site")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q djangoSiteQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q djangoSiteQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no djangoSiteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from django_site")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DjangoSiteSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DjangoSiteSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no DjangoSite slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DjangoSiteSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoSiteSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoSite slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `django_site` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoSitePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoSitePrimaryKeyColumns), 1, len(djangoSitePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from djangoSite slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *DjangoSite) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *DjangoSite) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DjangoSite) ReloadG() error {
	if o == nil {
		return errors.New("models: no DjangoSite provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoSite) Reload(exec boil.Executor) error {
	ret, err := FindDjangoSite(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoSiteSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoSiteSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoSiteSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DjangoSiteSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoSiteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	djangoSites := DjangoSiteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `django_site`.* FROM `django_site` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoSitePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(djangoSitePrimaryKeyColumns), 1, len(djangoSitePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&djangoSites)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoSiteSlice")
	}

	*o = djangoSites

	return nil
}

// DjangoSiteExists checks if the DjangoSite row exists.
func DjangoSiteExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `django_site` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_site exists")
	}

	return exists, nil
}

// DjangoSiteExistsG checks if the DjangoSite row exists.
func DjangoSiteExistsG(id int) (bool, error) {
	return DjangoSiteExists(boil.GetDB(), id)
}

// DjangoSiteExistsGP checks if the DjangoSite row exists. Panics on error.
func DjangoSiteExistsGP(id int) bool {
	e, err := DjangoSiteExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DjangoSiteExistsP checks if the DjangoSite row exists. Panics on error.
func DjangoSiteExistsP(exec boil.Executor, id int) bool {
	e, err := DjangoSiteExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
