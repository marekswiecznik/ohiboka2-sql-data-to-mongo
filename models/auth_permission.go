// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// AuthPermission is an object representing the database table.
type AuthPermission struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string `boil:"name" json:"name" toml:"name" yaml:"name"`
	ContentTypeID int    `boil:"content_type_id" json:"content_type_id" toml:"content_type_id" yaml:"content_type_id"`
	Codename      string `boil:"codename" json:"codename" toml:"codename" yaml:"codename"`

	R *authPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// authPermissionR is where relationships are stored.
type authPermissionR struct {
	ContentType                       *DjangoContentType
	PermissionAuthGroupPermissions    AuthGroupPermissionSlice
	PermissionAuthUserUserPermissions AuthUserUserPermissionSlice
}

// authPermissionL is where Load methods for each relationship are stored.
type authPermissionL struct{}

var (
	authPermissionColumns               = []string{"id", "name", "content_type_id", "codename"}
	authPermissionColumnsWithoutDefault = []string{"name", "content_type_id", "codename"}
	authPermissionColumnsWithDefault    = []string{"id"}
	authPermissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthPermissionSlice is an alias for a slice of pointers to AuthPermission.
	// This should generally be used opposed to []AuthPermission.
	AuthPermissionSlice []*AuthPermission

	authPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authPermissionType                 = reflect.TypeOf(&AuthPermission{})
	authPermissionMapping              = queries.MakeStructMapping(authPermissionType)
	authPermissionPrimaryKeyMapping, _ = queries.BindMapping(authPermissionType, authPermissionMapping, authPermissionPrimaryKeyColumns)
	authPermissionInsertCacheMut       sync.RWMutex
	authPermissionInsertCache          = make(map[string]insertCache)
	authPermissionUpdateCacheMut       sync.RWMutex
	authPermissionUpdateCache          = make(map[string]updateCache)
	authPermissionUpsertCacheMut       sync.RWMutex
	authPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single authPermission record from the query, and panics on error.
func (q authPermissionQuery) OneP() *AuthPermission {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authPermission record from the query.
func (q authPermissionQuery) One() (*AuthPermission, error) {
	o := &AuthPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_permission")
	}

	return o, nil
}

// AllP returns all AuthPermission records from the query, and panics on error.
func (q authPermissionQuery) AllP() AuthPermissionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthPermission records from the query.
func (q authPermissionQuery) All() (AuthPermissionSlice, error) {
	var o AuthPermissionSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthPermission slice")
	}

	return o, nil
}

// CountP returns the count of all AuthPermission records in the query, and panics on error.
func (q authPermissionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthPermission records in the query.
func (q authPermissionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_permission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authPermissionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authPermissionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_permission exists")
	}

	return count > 0, nil
}

// ContentTypeG pointed to by the foreign key.
func (o *AuthPermission) ContentTypeG(mods ...qm.QueryMod) djangoContentTypeQuery {
	return o.ContentType(boil.GetDB(), mods...)
}

// ContentType pointed to by the foreign key.
func (o *AuthPermission) ContentType(exec boil.Executor, mods ...qm.QueryMod) djangoContentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ContentTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := DjangoContentTypes(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_content_type`")

	return query
}

// PermissionAuthGroupPermissionsG retrieves all the auth_group_permission's auth group permissions via permission_id column.
func (o *AuthPermission) PermissionAuthGroupPermissionsG(mods ...qm.QueryMod) authGroupPermissionQuery {
	return o.PermissionAuthGroupPermissions(boil.GetDB(), mods...)
}

// PermissionAuthGroupPermissions retrieves all the auth_group_permission's auth group permissions with an executor via permission_id column.
func (o *AuthPermission) PermissionAuthGroupPermissions(exec boil.Executor, mods ...qm.QueryMod) authGroupPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`permission_id`=?", o.ID),
	)

	query := AuthGroupPermissions(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_group_permissions` as `a`")
	return query
}

// PermissionAuthUserUserPermissionsG retrieves all the auth_user_user_permission's auth user user permissions via permission_id column.
func (o *AuthPermission) PermissionAuthUserUserPermissionsG(mods ...qm.QueryMod) authUserUserPermissionQuery {
	return o.PermissionAuthUserUserPermissions(boil.GetDB(), mods...)
}

// PermissionAuthUserUserPermissions retrieves all the auth_user_user_permission's auth user user permissions with an executor via permission_id column.
func (o *AuthPermission) PermissionAuthUserUserPermissions(exec boil.Executor, mods ...qm.QueryMod) authUserUserPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`permission_id`=?", o.ID),
	)

	query := AuthUserUserPermissions(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user_user_permissions` as `a`")
	return query
}

// LoadContentType allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authPermissionL) LoadContentType(e boil.Executor, singular bool, maybeAuthPermission interface{}) error {
	var slice []*AuthPermission
	var object *AuthPermission

	count := 1
	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*AuthPermissionSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args[0] = object.ContentTypeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}
			args[i] = obj.ContentTypeID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_content_type` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DjangoContentType")
	}
	defer results.Close()

	var resultSlice []*DjangoContentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DjangoContentType")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ContentType = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentTypeID == foreign.ID {
				local.R.ContentType = foreign
				break
			}
		}
	}

	return nil
}

// LoadPermissionAuthGroupPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authPermissionL) LoadPermissionAuthGroupPermissions(e boil.Executor, singular bool, maybeAuthPermission interface{}) error {
	var slice []*AuthPermission
	var object *AuthPermission

	count := 1
	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*AuthPermissionSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_group_permissions` where `permission_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_group_permissions")
	}
	defer results.Close()

	var resultSlice []*AuthGroupPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_group_permissions")
	}

	if singular {
		object.R.PermissionAuthGroupPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PermissionID {
				local.R.PermissionAuthGroupPermissions = append(local.R.PermissionAuthGroupPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPermissionAuthUserUserPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authPermissionL) LoadPermissionAuthUserUserPermissions(e boil.Executor, singular bool, maybeAuthPermission interface{}) error {
	var slice []*AuthPermission
	var object *AuthPermission

	count := 1
	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*AuthPermissionSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user_user_permissions` where `permission_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_user_permissions")
	}
	defer results.Close()

	var resultSlice []*AuthUserUserPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_user_permissions")
	}

	if singular {
		object.R.PermissionAuthUserUserPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PermissionID {
				local.R.PermissionAuthUserUserPermissions = append(local.R.PermissionAuthUserUserPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// SetContentTypeG of the auth_permission to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeAuthPermissions.
// Uses the global database handle.
func (o *AuthPermission) SetContentTypeG(insert bool, related *DjangoContentType) error {
	return o.SetContentType(boil.GetDB(), insert, related)
}

// SetContentTypeP of the auth_permission to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeAuthPermissions.
// Panics on error.
func (o *AuthPermission) SetContentTypeP(exec boil.Executor, insert bool, related *DjangoContentType) {
	if err := o.SetContentType(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContentTypeGP of the auth_permission to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeAuthPermissions.
// Uses the global database handle and panics on error.
func (o *AuthPermission) SetContentTypeGP(insert bool, related *DjangoContentType) {
	if err := o.SetContentType(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContentType of the auth_permission to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeAuthPermissions.
func (o *AuthPermission) SetContentType(exec boil.Executor, insert bool, related *DjangoContentType) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `auth_permission` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_type_id"}),
		strmangle.WhereClause("`", "`", 0, authPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentTypeID = related.ID

	if o.R == nil {
		o.R = &authPermissionR{
			ContentType: related,
		}
	} else {
		o.R.ContentType = related
	}

	if related.R == nil {
		related.R = &djangoContentTypeR{
			ContentTypeAuthPermissions: AuthPermissionSlice{o},
		}
	} else {
		related.R.ContentTypeAuthPermissions = append(related.R.ContentTypeAuthPermissions, o)
	}

	return nil
}

// AddPermissionAuthGroupPermissionsG adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthGroupPermissions.
// Sets related.R.Permission appropriately.
// Uses the global database handle.
func (o *AuthPermission) AddPermissionAuthGroupPermissionsG(insert bool, related ...*AuthGroupPermission) error {
	return o.AddPermissionAuthGroupPermissions(boil.GetDB(), insert, related...)
}

// AddPermissionAuthGroupPermissionsP adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthGroupPermissions.
// Sets related.R.Permission appropriately.
// Panics on error.
func (o *AuthPermission) AddPermissionAuthGroupPermissionsP(exec boil.Executor, insert bool, related ...*AuthGroupPermission) {
	if err := o.AddPermissionAuthGroupPermissions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPermissionAuthGroupPermissionsGP adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthGroupPermissions.
// Sets related.R.Permission appropriately.
// Uses the global database handle and panics on error.
func (o *AuthPermission) AddPermissionAuthGroupPermissionsGP(insert bool, related ...*AuthGroupPermission) {
	if err := o.AddPermissionAuthGroupPermissions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPermissionAuthGroupPermissions adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthGroupPermissions.
// Sets related.R.Permission appropriately.
func (o *AuthPermission) AddPermissionAuthGroupPermissions(exec boil.Executor, insert bool, related ...*AuthGroupPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PermissionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_group_permissions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"permission_id"}),
				strmangle.WhereClause("`", "`", 0, authGroupPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PermissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authPermissionR{
			PermissionAuthGroupPermissions: related,
		}
	} else {
		o.R.PermissionAuthGroupPermissions = append(o.R.PermissionAuthGroupPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authGroupPermissionR{
				Permission: o,
			}
		} else {
			rel.R.Permission = o
		}
	}
	return nil
}

// AddPermissionAuthUserUserPermissionsG adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthUserUserPermissions.
// Sets related.R.Permission appropriately.
// Uses the global database handle.
func (o *AuthPermission) AddPermissionAuthUserUserPermissionsG(insert bool, related ...*AuthUserUserPermission) error {
	return o.AddPermissionAuthUserUserPermissions(boil.GetDB(), insert, related...)
}

// AddPermissionAuthUserUserPermissionsP adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthUserUserPermissions.
// Sets related.R.Permission appropriately.
// Panics on error.
func (o *AuthPermission) AddPermissionAuthUserUserPermissionsP(exec boil.Executor, insert bool, related ...*AuthUserUserPermission) {
	if err := o.AddPermissionAuthUserUserPermissions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPermissionAuthUserUserPermissionsGP adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthUserUserPermissions.
// Sets related.R.Permission appropriately.
// Uses the global database handle and panics on error.
func (o *AuthPermission) AddPermissionAuthUserUserPermissionsGP(insert bool, related ...*AuthUserUserPermission) {
	if err := o.AddPermissionAuthUserUserPermissions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPermissionAuthUserUserPermissions adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthUserUserPermissions.
// Sets related.R.Permission appropriately.
func (o *AuthPermission) AddPermissionAuthUserUserPermissions(exec boil.Executor, insert bool, related ...*AuthUserUserPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PermissionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_user_user_permissions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"permission_id"}),
				strmangle.WhereClause("`", "`", 0, authUserUserPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PermissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authPermissionR{
			PermissionAuthUserUserPermissions: related,
		}
	} else {
		o.R.PermissionAuthUserUserPermissions = append(o.R.PermissionAuthUserUserPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserUserPermissionR{
				Permission: o,
			}
		} else {
			rel.R.Permission = o
		}
	}
	return nil
}

// AuthPermissionsG retrieves all records.
func AuthPermissionsG(mods ...qm.QueryMod) authPermissionQuery {
	return AuthPermissions(boil.GetDB(), mods...)
}

// AuthPermissions retrieves all the records using an executor.
func AuthPermissions(exec boil.Executor, mods ...qm.QueryMod) authPermissionQuery {
	mods = append(mods, qm.From("`auth_permission`"))
	return authPermissionQuery{NewQuery(exec, mods...)}
}

// FindAuthPermissionG retrieves a single record by ID.
func FindAuthPermissionG(id int, selectCols ...string) (*AuthPermission, error) {
	return FindAuthPermission(boil.GetDB(), id, selectCols...)
}

// FindAuthPermissionGP retrieves a single record by ID, and panics on error.
func FindAuthPermissionGP(id int, selectCols ...string) *AuthPermission {
	retobj, err := FindAuthPermission(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAuthPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthPermission(exec boil.Executor, id int, selectCols ...string) (*AuthPermission, error) {
	authPermissionObj := &AuthPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth_permission` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(authPermissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_permission")
	}

	return authPermissionObj, nil
}

// FindAuthPermissionP retrieves a single record by ID with an executor, and panics on error.
func FindAuthPermissionP(exec boil.Executor, id int, selectCols ...string) *AuthPermission {
	retobj, err := FindAuthPermission(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthPermission) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthPermission) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthPermission) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthPermission) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_permission provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authPermissionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authPermissionInsertCacheMut.RLock()
	cache, cached := authPermissionInsertCache[key]
	authPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authPermissionColumns,
			authPermissionColumnsWithDefault,
			authPermissionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `auth_permission` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth_permission` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authPermissionPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_permission")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authPermissionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_permission")
	}

CacheNoHooks:
	if !cached {
		authPermissionInsertCacheMut.Lock()
		authPermissionInsertCache[key] = cache
		authPermissionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AuthPermission record. See Update for
// whitelist behavior description.
func (o *AuthPermission) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AuthPermission record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AuthPermission) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AuthPermission, and panics on error.
// See Update for whitelist behavior description.
func (o *AuthPermission) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AuthPermission.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AuthPermission) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	authPermissionUpdateCacheMut.RLock()
	cache, cached := authPermissionUpdateCache[key]
	authPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(authPermissionColumns, authPermissionPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update auth_permission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth_permission` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, append(wl, authPermissionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update auth_permission row")
	}

	if !cached {
		authPermissionUpdateCacheMut.Lock()
		authPermissionUpdateCache[key] = cache
		authPermissionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q authPermissionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q authPermissionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for auth_permission")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthPermissionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AuthPermissionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AuthPermissionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthPermissionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `auth_permission` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authPermissionPrimaryKeyColumns), len(colNames)+1, len(authPermissionPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in authPermission slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthPermission) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AuthPermission) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AuthPermission) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AuthPermission) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_permission provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authPermissionUpsertCacheMut.RLock()
	cache, cached := authPermissionUpsertCache[key]
	authPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			authPermissionColumns,
			authPermissionColumnsWithDefault,
			authPermissionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			authPermissionColumns,
			authPermissionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert auth_permission, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "auth_permission", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth_permission` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth_permission")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authPermissionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_permission")
	}

CacheNoHooks:
	if !cached {
		authPermissionUpsertCacheMut.Lock()
		authPermissionUpsertCache[key] = cache
		authPermissionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single AuthPermission record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthPermission) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AuthPermission record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthPermission) DeleteG() error {
	if o == nil {
		return errors.New("models: no AuthPermission provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AuthPermission record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthPermission) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AuthPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthPermission) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthPermission provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authPermissionPrimaryKeyMapping)
	sql := "DELETE FROM `auth_permission` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from auth_permission")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q authPermissionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q authPermissionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no authPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from auth_permission")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AuthPermissionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AuthPermissionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AuthPermission slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AuthPermissionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthPermissionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthPermission slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `auth_permission` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authPermissionPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authPermissionPrimaryKeyColumns), 1, len(authPermissionPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from authPermission slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AuthPermission) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AuthPermission) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthPermission) ReloadG() error {
	if o == nil {
		return errors.New("models: no AuthPermission provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthPermission) Reload(exec boil.Executor) error {
	ret, err := FindAuthPermission(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthPermissionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthPermissionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthPermissionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AuthPermissionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthPermissionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	authPermissions := AuthPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `auth_permission`.* FROM `auth_permission` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authPermissionPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(authPermissionPrimaryKeyColumns), 1, len(authPermissionPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&authPermissions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthPermissionSlice")
	}

	*o = authPermissions

	return nil
}

// AuthPermissionExists checks if the AuthPermission row exists.
func AuthPermissionExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `auth_permission` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_permission exists")
	}

	return exists, nil
}

// AuthPermissionExistsG checks if the AuthPermission row exists.
func AuthPermissionExistsG(id int) (bool, error) {
	return AuthPermissionExists(boil.GetDB(), id)
}

// AuthPermissionExistsGP checks if the AuthPermission row exists. Panics on error.
func AuthPermissionExistsGP(id int) bool {
	e, err := AuthPermissionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AuthPermissionExistsP checks if the AuthPermission row exists. Panics on error.
func AuthPermissionExistsP(exec boil.Executor, id int) bool {
	e, err := AuthPermissionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
