// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// AuthUserGroup is an object representing the database table.
type AuthUserGroup struct {
	ID      int `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID  int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	GroupID int `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`

	R *authUserGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authUserGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// authUserGroupR is where relationships are stored.
type authUserGroupR struct {
	Group *AuthGroup
	User  *AuthUser
}

// authUserGroupL is where Load methods for each relationship are stored.
type authUserGroupL struct{}

var (
	authUserGroupColumns               = []string{"id", "user_id", "group_id"}
	authUserGroupColumnsWithoutDefault = []string{"user_id", "group_id"}
	authUserGroupColumnsWithDefault    = []string{"id"}
	authUserGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthUserGroupSlice is an alias for a slice of pointers to AuthUserGroup.
	// This should generally be used opposed to []AuthUserGroup.
	AuthUserGroupSlice []*AuthUserGroup

	authUserGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authUserGroupType                 = reflect.TypeOf(&AuthUserGroup{})
	authUserGroupMapping              = queries.MakeStructMapping(authUserGroupType)
	authUserGroupPrimaryKeyMapping, _ = queries.BindMapping(authUserGroupType, authUserGroupMapping, authUserGroupPrimaryKeyColumns)
	authUserGroupInsertCacheMut       sync.RWMutex
	authUserGroupInsertCache          = make(map[string]insertCache)
	authUserGroupUpdateCacheMut       sync.RWMutex
	authUserGroupUpdateCache          = make(map[string]updateCache)
	authUserGroupUpsertCacheMut       sync.RWMutex
	authUserGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single authUserGroup record from the query, and panics on error.
func (q authUserGroupQuery) OneP() *AuthUserGroup {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authUserGroup record from the query.
func (q authUserGroupQuery) One() (*AuthUserGroup, error) {
	o := &AuthUserGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_user_groups")
	}

	return o, nil
}

// AllP returns all AuthUserGroup records from the query, and panics on error.
func (q authUserGroupQuery) AllP() AuthUserGroupSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthUserGroup records from the query.
func (q authUserGroupQuery) All() (AuthUserGroupSlice, error) {
	var o AuthUserGroupSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthUserGroup slice")
	}

	return o, nil
}

// CountP returns the count of all AuthUserGroup records in the query, and panics on error.
func (q authUserGroupQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthUserGroup records in the query.
func (q authUserGroupQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_user_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authUserGroupQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authUserGroupQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_user_groups exists")
	}

	return count > 0, nil
}

// GroupG pointed to by the foreign key.
func (o *AuthUserGroup) GroupG(mods ...qm.QueryMod) authGroupQuery {
	return o.Group(boil.GetDB(), mods...)
}

// Group pointed to by the foreign key.
func (o *AuthUserGroup) Group(exec boil.Executor, mods ...qm.QueryMod) authGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthGroups(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_group`")

	return query
}

// UserG pointed to by the foreign key.
func (o *AuthUserGroup) UserG(mods ...qm.QueryMod) authUserQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *AuthUserGroup) User(exec boil.Executor, mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user`")

	return query
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserGroupL) LoadGroup(e boil.Executor, singular bool, maybeAuthUserGroup interface{}) error {
	var slice []*AuthUserGroup
	var object *AuthUserGroup

	count := 1
	if singular {
		object = maybeAuthUserGroup.(*AuthUserGroup)
	} else {
		slice = *maybeAuthUserGroup.(*AuthUserGroupSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserGroupR{}
		}
		args[0] = object.GroupID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserGroupR{}
			}
			args[i] = obj.GroupID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_group` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthGroup")
	}
	defer results.Close()

	var resultSlice []*AuthGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthGroup")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Group = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (authUserGroupL) LoadUser(e boil.Executor, singular bool, maybeAuthUserGroup interface{}) error {
	var slice []*AuthUserGroup
	var object *AuthUserGroup

	count := 1
	if singular {
		object = maybeAuthUserGroup.(*AuthUserGroup)
	} else {
		slice = *maybeAuthUserGroup.(*AuthUserGroupSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &authUserGroupR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &authUserGroupR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}
	defer results.Close()

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetGroupG of the auth_user_group to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupAuthUserGroups.
// Uses the global database handle.
func (o *AuthUserGroup) SetGroupG(insert bool, related *AuthGroup) error {
	return o.SetGroup(boil.GetDB(), insert, related)
}

// SetGroupP of the auth_user_group to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupAuthUserGroups.
// Panics on error.
func (o *AuthUserGroup) SetGroupP(exec boil.Executor, insert bool, related *AuthGroup) {
	if err := o.SetGroup(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGroupGP of the auth_user_group to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupAuthUserGroups.
// Uses the global database handle and panics on error.
func (o *AuthUserGroup) SetGroupGP(insert bool, related *AuthGroup) {
	if err := o.SetGroup(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGroup of the auth_user_group to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupAuthUserGroups.
func (o *AuthUserGroup) SetGroup(exec boil.Executor, insert bool, related *AuthGroup) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `auth_user_groups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID

	if o.R == nil {
		o.R = &authUserGroupR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &authGroupR{
			GroupAuthUserGroups: AuthUserGroupSlice{o},
		}
	} else {
		related.R.GroupAuthUserGroups = append(related.R.GroupAuthUserGroups, o)
	}

	return nil
}

// SetUserG of the auth_user_group to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthUserGroups.
// Uses the global database handle.
func (o *AuthUserGroup) SetUserG(insert bool, related *AuthUser) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the auth_user_group to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthUserGroups.
// Panics on error.
func (o *AuthUserGroup) SetUserP(exec boil.Executor, insert bool, related *AuthUser) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the auth_user_group to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthUserGroups.
// Uses the global database handle and panics on error.
func (o *AuthUserGroup) SetUserGP(insert bool, related *AuthUser) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the auth_user_group to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthUserGroups.
func (o *AuthUserGroup) SetUser(exec boil.Executor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `auth_user_groups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &authUserGroupR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserAuthUserGroups: AuthUserGroupSlice{o},
		}
	} else {
		related.R.UserAuthUserGroups = append(related.R.UserAuthUserGroups, o)
	}

	return nil
}

// AuthUserGroupsG retrieves all records.
func AuthUserGroupsG(mods ...qm.QueryMod) authUserGroupQuery {
	return AuthUserGroups(boil.GetDB(), mods...)
}

// AuthUserGroups retrieves all the records using an executor.
func AuthUserGroups(exec boil.Executor, mods ...qm.QueryMod) authUserGroupQuery {
	mods = append(mods, qm.From("`auth_user_groups`"))
	return authUserGroupQuery{NewQuery(exec, mods...)}
}

// FindAuthUserGroupG retrieves a single record by ID.
func FindAuthUserGroupG(id int, selectCols ...string) (*AuthUserGroup, error) {
	return FindAuthUserGroup(boil.GetDB(), id, selectCols...)
}

// FindAuthUserGroupGP retrieves a single record by ID, and panics on error.
func FindAuthUserGroupGP(id int, selectCols ...string) *AuthUserGroup {
	retobj, err := FindAuthUserGroup(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAuthUserGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthUserGroup(exec boil.Executor, id int, selectCols ...string) (*AuthUserGroup, error) {
	authUserGroupObj := &AuthUserGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth_user_groups` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(authUserGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_user_groups")
	}

	return authUserGroupObj, nil
}

// FindAuthUserGroupP retrieves a single record by ID with an executor, and panics on error.
func FindAuthUserGroupP(exec boil.Executor, id int, selectCols ...string) *AuthUserGroup {
	retobj, err := FindAuthUserGroup(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthUserGroup) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthUserGroup) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthUserGroup) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthUserGroup) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_user_groups provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(authUserGroupColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authUserGroupInsertCacheMut.RLock()
	cache, cached := authUserGroupInsertCache[key]
	authUserGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authUserGroupColumns,
			authUserGroupColumnsWithDefault,
			authUserGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authUserGroupType, authUserGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authUserGroupType, authUserGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `auth_user_groups` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth_user_groups` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_user_groups")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authUserGroupMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_user_groups")
	}

CacheNoHooks:
	if !cached {
		authUserGroupInsertCacheMut.Lock()
		authUserGroupInsertCache[key] = cache
		authUserGroupInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AuthUserGroup record. See Update for
// whitelist behavior description.
func (o *AuthUserGroup) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AuthUserGroup record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AuthUserGroup) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AuthUserGroup, and panics on error.
// See Update for whitelist behavior description.
func (o *AuthUserGroup) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AuthUserGroup.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AuthUserGroup) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	authUserGroupUpdateCacheMut.RLock()
	cache, cached := authUserGroupUpdateCache[key]
	authUserGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(authUserGroupColumns, authUserGroupPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update auth_user_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth_user_groups` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authUserGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authUserGroupType, authUserGroupMapping, append(wl, authUserGroupPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update auth_user_groups row")
	}

	if !cached {
		authUserGroupUpdateCacheMut.Lock()
		authUserGroupUpdateCache[key] = cache
		authUserGroupUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q authUserGroupQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q authUserGroupQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for auth_user_groups")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthUserGroupSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AuthUserGroupSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AuthUserGroupSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthUserGroupSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `auth_user_groups` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authUserGroupPrimaryKeyColumns), len(colNames)+1, len(authUserGroupPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in authUserGroup slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthUserGroup) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AuthUserGroup) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AuthUserGroup) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AuthUserGroup) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no auth_user_groups provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(authUserGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authUserGroupUpsertCacheMut.RLock()
	cache, cached := authUserGroupUpsertCache[key]
	authUserGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			authUserGroupColumns,
			authUserGroupColumnsWithDefault,
			authUserGroupColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			authUserGroupColumns,
			authUserGroupPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert auth_user_groups, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "auth_user_groups", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth_user_groups` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(authUserGroupType, authUserGroupMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authUserGroupType, authUserGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth_user_groups")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authUserGroupMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_user_groups")
	}

CacheNoHooks:
	if !cached {
		authUserGroupUpsertCacheMut.Lock()
		authUserGroupUpsertCache[key] = cache
		authUserGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single AuthUserGroup record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthUserGroup) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AuthUserGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthUserGroup) DeleteG() error {
	if o == nil {
		return errors.New("models: no AuthUserGroup provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AuthUserGroup record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AuthUserGroup) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AuthUserGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthUserGroup) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthUserGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authUserGroupPrimaryKeyMapping)
	sql := "DELETE FROM `auth_user_groups` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from auth_user_groups")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q authUserGroupQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q authUserGroupQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no authUserGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from auth_user_groups")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AuthUserGroupSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AuthUserGroupSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AuthUserGroup slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AuthUserGroupSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthUserGroupSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AuthUserGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `auth_user_groups` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authUserGroupPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(authUserGroupPrimaryKeyColumns), 1, len(authUserGroupPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from authUserGroup slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AuthUserGroup) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AuthUserGroup) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthUserGroup) ReloadG() error {
	if o == nil {
		return errors.New("models: no AuthUserGroup provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthUserGroup) Reload(exec boil.Executor) error {
	ret, err := FindAuthUserGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthUserGroupSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AuthUserGroupSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserGroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AuthUserGroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthUserGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	authUserGroups := AuthUserGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authUserGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `auth_user_groups`.* FROM `auth_user_groups` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, authUserGroupPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(authUserGroupPrimaryKeyColumns), 1, len(authUserGroupPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&authUserGroups)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthUserGroupSlice")
	}

	*o = authUserGroups

	return nil
}

// AuthUserGroupExists checks if the AuthUserGroup row exists.
func AuthUserGroupExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `auth_user_groups` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_user_groups exists")
	}

	return exists, nil
}

// AuthUserGroupExistsG checks if the AuthUserGroup row exists.
func AuthUserGroupExistsG(id int) (bool, error) {
	return AuthUserGroupExists(boil.GetDB(), id)
}

// AuthUserGroupExistsGP checks if the AuthUserGroup row exists. Panics on error.
func AuthUserGroupExistsGP(id int) bool {
	e, err := AuthUserGroupExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AuthUserGroupExistsP checks if the AuthUserGroup row exists. Panics on error.
func AuthUserGroupExistsP(exec boil.Executor, id int) bool {
	e, err := AuthUserGroupExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
