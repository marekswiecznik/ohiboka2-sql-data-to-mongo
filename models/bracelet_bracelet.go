// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// BraceletBracelet is an object representing the database table.
type BraceletBracelet struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PhotoID    null.Int  `boil:"photo_id" json:"photo_id,omitempty" toml:"photo_id" yaml:"photo_id,omitempty"`
	Date       time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Accepted   int8      `boil:"accepted" json:"accepted" toml:"accepted" yaml:"accepted"`
	Difficulty int       `boil:"difficulty" json:"difficulty" toml:"difficulty" yaml:"difficulty"`
	CategoryID int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Rate       string    `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	Public     int8      `boil:"public" json:"public" toml:"public" yaml:"public"`
	URL        string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	Deleted    int8      `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`
	Type       int8      `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *braceletBraceletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletBraceletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletBraceletR is where relationships are stored.
type braceletBraceletR struct {
	Category                        *BraceletBraceletcategory
	Photo                           *BraceletPhoto
	User                            *AuthUser
	BraceletBraceletBraceletknots   BraceletBraceletknotSlice
	BraceletBraceletBraceletstrings BraceletBraceletstringSlice
	BraceletBraceletPhotos          BraceletPhotoSlice
	BraceletBraceletRates           BraceletRateSlice
}

// braceletBraceletL is where Load methods for each relationship are stored.
type braceletBraceletL struct{}

var (
	braceletBraceletColumns               = []string{"id", "user_id", "photo_id", "date", "name", "accepted", "difficulty", "category_id", "rate", "public", "url", "deleted", "type"}
	braceletBraceletColumnsWithoutDefault = []string{"user_id", "photo_id", "date", "name", "accepted", "difficulty", "category_id", "rate", "url", "type"}
	braceletBraceletColumnsWithDefault    = []string{"id", "public", "deleted"}
	braceletBraceletPrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletBraceletSlice is an alias for a slice of pointers to BraceletBracelet.
	// This should generally be used opposed to []BraceletBracelet.
	BraceletBraceletSlice []*BraceletBracelet

	braceletBraceletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletBraceletType                 = reflect.TypeOf(&BraceletBracelet{})
	braceletBraceletMapping              = queries.MakeStructMapping(braceletBraceletType)
	braceletBraceletPrimaryKeyMapping, _ = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, braceletBraceletPrimaryKeyColumns)
	braceletBraceletInsertCacheMut       sync.RWMutex
	braceletBraceletInsertCache          = make(map[string]insertCache)
	braceletBraceletUpdateCacheMut       sync.RWMutex
	braceletBraceletUpdateCache          = make(map[string]updateCache)
	braceletBraceletUpsertCacheMut       sync.RWMutex
	braceletBraceletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletBracelet record from the query, and panics on error.
func (q braceletBraceletQuery) OneP() *BraceletBracelet {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletBracelet record from the query.
func (q braceletBraceletQuery) One() (*BraceletBracelet, error) {
	o := &BraceletBracelet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_bracelet")
	}

	return o, nil
}

// AllP returns all BraceletBracelet records from the query, and panics on error.
func (q braceletBraceletQuery) AllP() BraceletBraceletSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletBracelet records from the query.
func (q braceletBraceletQuery) All() (BraceletBraceletSlice, error) {
	var o BraceletBraceletSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletBracelet slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletBracelet records in the query, and panics on error.
func (q braceletBraceletQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletBracelet records in the query.
func (q braceletBraceletQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_bracelet rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletBraceletQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletBraceletQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_bracelet exists")
	}

	return count > 0, nil
}

// CategoryG pointed to by the foreign key.
func (o *BraceletBracelet) CategoryG(mods ...qm.QueryMod) braceletBraceletcategoryQuery {
	return o.Category(boil.GetDB(), mods...)
}

// Category pointed to by the foreign key.
func (o *BraceletBracelet) Category(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletcategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := BraceletBraceletcategories(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletcategory`")

	return query
}

// PhotoG pointed to by the foreign key.
func (o *BraceletBracelet) PhotoG(mods ...qm.QueryMod) braceletPhotoQuery {
	return o.Photo(boil.GetDB(), mods...)
}

// Photo pointed to by the foreign key.
func (o *BraceletBracelet) Photo(exec boil.Executor, mods ...qm.QueryMod) braceletPhotoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	query := BraceletPhotos(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_photo`")

	return query
}

// UserG pointed to by the foreign key.
func (o *BraceletBracelet) UserG(mods ...qm.QueryMod) authUserQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *BraceletBracelet) User(exec boil.Executor, mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user`")

	return query
}

// BraceletBraceletBraceletknotsG retrieves all the bracelet_braceletknot's bracelet braceletknot via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletBraceletknotsG(mods ...qm.QueryMod) braceletBraceletknotQuery {
	return o.BraceletBraceletBraceletknots(boil.GetDB(), mods...)
}

// BraceletBraceletBraceletknots retrieves all the bracelet_braceletknot's bracelet braceletknot with an executor via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletBraceletknots(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletknotQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`bracelet_id`=?", o.ID),
	)

	query := BraceletBraceletknots(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletknot` as `a`")
	return query
}

// BraceletBraceletBraceletstringsG retrieves all the bracelet_braceletstring's bracelet braceletstring via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletBraceletstringsG(mods ...qm.QueryMod) braceletBraceletstringQuery {
	return o.BraceletBraceletBraceletstrings(boil.GetDB(), mods...)
}

// BraceletBraceletBraceletstrings retrieves all the bracelet_braceletstring's bracelet braceletstring with an executor via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletBraceletstrings(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletstringQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`bracelet_id`=?", o.ID),
	)

	query := BraceletBraceletstrings(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletstring` as `a`")
	return query
}

// BraceletBraceletPhotosG retrieves all the bracelet_photo's bracelet photo via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletPhotosG(mods ...qm.QueryMod) braceletPhotoQuery {
	return o.BraceletBraceletPhotos(boil.GetDB(), mods...)
}

// BraceletBraceletPhotos retrieves all the bracelet_photo's bracelet photo with an executor via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletPhotos(exec boil.Executor, mods ...qm.QueryMod) braceletPhotoQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`bracelet_id`=?", o.ID),
	)

	query := BraceletPhotos(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_photo` as `a`")
	return query
}

// BraceletBraceletRatesG retrieves all the bracelet_rate's bracelet rate via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletRatesG(mods ...qm.QueryMod) braceletRateQuery {
	return o.BraceletBraceletRates(boil.GetDB(), mods...)
}

// BraceletBraceletRates retrieves all the bracelet_rate's bracelet rate with an executor via bracelet_id column.
func (o *BraceletBracelet) BraceletBraceletRates(exec boil.Executor, mods ...qm.QueryMod) braceletRateQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`bracelet_id`=?", o.ID),
	)

	query := BraceletRates(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_rate` as `a`")
	return query
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadCategory(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletcategory` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BraceletBraceletcategory")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletcategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BraceletBraceletcategory")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Category = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadPhoto(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.PhotoID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.PhotoID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_photo` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BraceletPhoto")
	}
	defer results.Close()

	var resultSlice []*BraceletPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BraceletPhoto")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Photo = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID.Int == foreign.ID {
				local.R.Photo = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadUser(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}
	defer results.Close()

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadBraceletBraceletBraceletknots allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadBraceletBraceletBraceletknots(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletknot` where `bracelet_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_braceletknot")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletknot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_braceletknot")
	}

	if singular {
		object.R.BraceletBraceletBraceletknots = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BraceletID {
				local.R.BraceletBraceletBraceletknots = append(local.R.BraceletBraceletBraceletknots, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBraceletBraceletBraceletstrings allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadBraceletBraceletBraceletstrings(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletstring` where `bracelet_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_braceletstring")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletstring
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_braceletstring")
	}

	if singular {
		object.R.BraceletBraceletBraceletstrings = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BraceletID {
				local.R.BraceletBraceletBraceletstrings = append(local.R.BraceletBraceletBraceletstrings, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBraceletBraceletPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadBraceletBraceletPhotos(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_photo` where `bracelet_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_photo")
	}
	defer results.Close()

	var resultSlice []*BraceletPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_photo")
	}

	if singular {
		object.R.BraceletBraceletPhotos = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BraceletID {
				local.R.BraceletBraceletPhotos = append(local.R.BraceletBraceletPhotos, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBraceletBraceletRates allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletL) LoadBraceletBraceletRates(e boil.Executor, singular bool, maybeBraceletBracelet interface{}) error {
	var slice []*BraceletBracelet
	var object *BraceletBracelet

	count := 1
	if singular {
		object = maybeBraceletBracelet.(*BraceletBracelet)
	} else {
		slice = *maybeBraceletBracelet.(*BraceletBraceletSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_rate` where `bracelet_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_rate")
	}
	defer results.Close()

	var resultSlice []*BraceletRate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_rate")
	}

	if singular {
		object.R.BraceletBraceletRates = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BraceletID {
				local.R.BraceletBraceletRates = append(local.R.BraceletBraceletRates, foreign)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the bracelet_bracelet to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBraceletBracelets.
// Uses the global database handle.
func (o *BraceletBracelet) SetCategoryG(insert bool, related *BraceletBraceletcategory) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategoryP of the bracelet_bracelet to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBraceletBracelets.
// Panics on error.
func (o *BraceletBracelet) SetCategoryP(exec boil.Executor, insert bool, related *BraceletBraceletcategory) {
	if err := o.SetCategory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoryGP of the bracelet_bracelet to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBraceletBracelets.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) SetCategoryGP(insert bool, related *BraceletBraceletcategory) {
	if err := o.SetCategory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategory of the bracelet_bracelet to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBraceletBracelets.
func (o *BraceletBracelet) SetCategory(exec boil.Executor, insert bool, related *BraceletBraceletcategory) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_bracelet` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID

	if o.R == nil {
		o.R = &braceletBraceletR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &braceletBraceletcategoryR{
			CategoryBraceletBracelets: BraceletBraceletSlice{o},
		}
	} else {
		related.R.CategoryBraceletBracelets = append(related.R.CategoryBraceletBracelets, o)
	}

	return nil
}

// SetPhotoG of the bracelet_bracelet to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoBraceletBracelets.
// Uses the global database handle.
func (o *BraceletBracelet) SetPhotoG(insert bool, related *BraceletPhoto) error {
	return o.SetPhoto(boil.GetDB(), insert, related)
}

// SetPhotoP of the bracelet_bracelet to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoBraceletBracelets.
// Panics on error.
func (o *BraceletBracelet) SetPhotoP(exec boil.Executor, insert bool, related *BraceletPhoto) {
	if err := o.SetPhoto(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPhotoGP of the bracelet_bracelet to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoBraceletBracelets.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) SetPhotoGP(insert bool, related *BraceletPhoto) {
	if err := o.SetPhoto(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPhoto of the bracelet_bracelet to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoBraceletBracelets.
func (o *BraceletBracelet) SetPhoto(exec boil.Executor, insert bool, related *BraceletPhoto) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_bracelet` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
		strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID.Int = related.ID
	o.PhotoID.Valid = true

	if o.R == nil {
		o.R = &braceletBraceletR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &braceletPhotoR{
			PhotoBraceletBracelets: BraceletBraceletSlice{o},
		}
	} else {
		related.R.PhotoBraceletBracelets = append(related.R.PhotoBraceletBracelets, o)
	}

	return nil
}

// RemovePhotoG relationship.
// Sets o.R.Photo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *BraceletBracelet) RemovePhotoG(related *BraceletPhoto) error {
	return o.RemovePhoto(boil.GetDB(), related)
}

// RemovePhotoP relationship.
// Sets o.R.Photo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *BraceletBracelet) RemovePhotoP(exec boil.Executor, related *BraceletPhoto) {
	if err := o.RemovePhoto(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePhotoGP relationship.
// Sets o.R.Photo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) RemovePhotoGP(related *BraceletPhoto) {
	if err := o.RemovePhoto(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePhoto relationship.
// Sets o.R.Photo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BraceletBracelet) RemovePhoto(exec boil.Executor, related *BraceletPhoto) error {
	var err error

	o.PhotoID.Valid = false
	if err = o.Update(exec, "photo_id"); err != nil {
		o.PhotoID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Photo = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PhotoBraceletBracelets {
		if o.PhotoID.Int != ri.PhotoID.Int {
			continue
		}

		ln := len(related.R.PhotoBraceletBracelets)
		if ln > 1 && i < ln-1 {
			related.R.PhotoBraceletBracelets[i] = related.R.PhotoBraceletBracelets[ln-1]
		}
		related.R.PhotoBraceletBracelets = related.R.PhotoBraceletBracelets[:ln-1]
		break
	}
	return nil
}

// SetUserG of the bracelet_bracelet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletBracelets.
// Uses the global database handle.
func (o *BraceletBracelet) SetUserG(insert bool, related *AuthUser) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the bracelet_bracelet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletBracelets.
// Panics on error.
func (o *BraceletBracelet) SetUserP(exec boil.Executor, insert bool, related *AuthUser) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the bracelet_bracelet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletBracelets.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) SetUserGP(insert bool, related *AuthUser) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the bracelet_bracelet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletBracelets.
func (o *BraceletBracelet) SetUser(exec boil.Executor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_bracelet` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &braceletBraceletR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserBraceletBracelets: BraceletBraceletSlice{o},
		}
	} else {
		related.R.UserBraceletBracelets = append(related.R.UserBraceletBracelets, o)
	}

	return nil
}

// AddBraceletBraceletBraceletknotsG adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletknots.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle.
func (o *BraceletBracelet) AddBraceletBraceletBraceletknotsG(insert bool, related ...*BraceletBraceletknot) error {
	return o.AddBraceletBraceletBraceletknots(boil.GetDB(), insert, related...)
}

// AddBraceletBraceletBraceletknotsP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletknots.
// Sets related.R.Bracelet appropriately.
// Panics on error.
func (o *BraceletBracelet) AddBraceletBraceletBraceletknotsP(exec boil.Executor, insert bool, related ...*BraceletBraceletknot) {
	if err := o.AddBraceletBraceletBraceletknots(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletBraceletknotsGP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletknots.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) AddBraceletBraceletBraceletknotsGP(insert bool, related ...*BraceletBraceletknot) {
	if err := o.AddBraceletBraceletBraceletknots(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletBraceletknots adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletknots.
// Sets related.R.Bracelet appropriately.
func (o *BraceletBracelet) AddBraceletBraceletBraceletknots(exec boil.Executor, insert bool, related ...*BraceletBraceletknot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BraceletID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_braceletknot` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BraceletID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletR{
			BraceletBraceletBraceletknots: related,
		}
	} else {
		o.R.BraceletBraceletBraceletknots = append(o.R.BraceletBraceletBraceletknots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletknotR{
				Bracelet: o,
			}
		} else {
			rel.R.Bracelet = o
		}
	}
	return nil
}

// AddBraceletBraceletBraceletstringsG adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletstrings.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle.
func (o *BraceletBracelet) AddBraceletBraceletBraceletstringsG(insert bool, related ...*BraceletBraceletstring) error {
	return o.AddBraceletBraceletBraceletstrings(boil.GetDB(), insert, related...)
}

// AddBraceletBraceletBraceletstringsP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletstrings.
// Sets related.R.Bracelet appropriately.
// Panics on error.
func (o *BraceletBracelet) AddBraceletBraceletBraceletstringsP(exec boil.Executor, insert bool, related ...*BraceletBraceletstring) {
	if err := o.AddBraceletBraceletBraceletstrings(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletBraceletstringsGP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletstrings.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) AddBraceletBraceletBraceletstringsGP(insert bool, related ...*BraceletBraceletstring) {
	if err := o.AddBraceletBraceletBraceletstrings(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletBraceletstrings adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletBraceletstrings.
// Sets related.R.Bracelet appropriately.
func (o *BraceletBracelet) AddBraceletBraceletBraceletstrings(exec boil.Executor, insert bool, related ...*BraceletBraceletstring) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BraceletID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_braceletstring` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletstringPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BraceletID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletR{
			BraceletBraceletBraceletstrings: related,
		}
	} else {
		o.R.BraceletBraceletBraceletstrings = append(o.R.BraceletBraceletBraceletstrings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletstringR{
				Bracelet: o,
			}
		} else {
			rel.R.Bracelet = o
		}
	}
	return nil
}

// AddBraceletBraceletPhotosG adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletPhotos.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle.
func (o *BraceletBracelet) AddBraceletBraceletPhotosG(insert bool, related ...*BraceletPhoto) error {
	return o.AddBraceletBraceletPhotos(boil.GetDB(), insert, related...)
}

// AddBraceletBraceletPhotosP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletPhotos.
// Sets related.R.Bracelet appropriately.
// Panics on error.
func (o *BraceletBracelet) AddBraceletBraceletPhotosP(exec boil.Executor, insert bool, related ...*BraceletPhoto) {
	if err := o.AddBraceletBraceletPhotos(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletPhotosGP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletPhotos.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) AddBraceletBraceletPhotosGP(insert bool, related ...*BraceletPhoto) {
	if err := o.AddBraceletBraceletPhotos(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletPhotos adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletPhotos.
// Sets related.R.Bracelet appropriately.
func (o *BraceletBracelet) AddBraceletBraceletPhotos(exec boil.Executor, insert bool, related ...*BraceletPhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BraceletID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_photo` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
				strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BraceletID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletR{
			BraceletBraceletPhotos: related,
		}
	} else {
		o.R.BraceletBraceletPhotos = append(o.R.BraceletBraceletPhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletPhotoR{
				Bracelet: o,
			}
		} else {
			rel.R.Bracelet = o
		}
	}
	return nil
}

// AddBraceletBraceletRatesG adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletRates.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle.
func (o *BraceletBracelet) AddBraceletBraceletRatesG(insert bool, related ...*BraceletRate) error {
	return o.AddBraceletBraceletRates(boil.GetDB(), insert, related...)
}

// AddBraceletBraceletRatesP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletRates.
// Sets related.R.Bracelet appropriately.
// Panics on error.
func (o *BraceletBracelet) AddBraceletBraceletRatesP(exec boil.Executor, insert bool, related ...*BraceletRate) {
	if err := o.AddBraceletBraceletRates(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletRatesGP adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletRates.
// Sets related.R.Bracelet appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletBracelet) AddBraceletBraceletRatesGP(insert bool, related ...*BraceletRate) {
	if err := o.AddBraceletBraceletRates(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBraceletBraceletRates adds the given related objects to the existing relationships
// of the bracelet_bracelet, optionally inserting them as new records.
// Appends related to o.R.BraceletBraceletRates.
// Sets related.R.Bracelet appropriately.
func (o *BraceletBracelet) AddBraceletBraceletRates(exec boil.Executor, insert bool, related ...*BraceletRate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BraceletID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_rate` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
				strmangle.WhereClause("`", "`", 0, braceletRatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BraceletID = o.ID
		}
	}

	if o.R == nil {
		o.R = &braceletBraceletR{
			BraceletBraceletRates: related,
		}
	} else {
		o.R.BraceletBraceletRates = append(o.R.BraceletBraceletRates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletRateR{
				Bracelet: o,
			}
		} else {
			rel.R.Bracelet = o
		}
	}
	return nil
}

// BraceletBraceletsG retrieves all records.
func BraceletBraceletsG(mods ...qm.QueryMod) braceletBraceletQuery {
	return BraceletBracelets(boil.GetDB(), mods...)
}

// BraceletBracelets retrieves all the records using an executor.
func BraceletBracelets(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	mods = append(mods, qm.From("`bracelet_bracelet`"))
	return braceletBraceletQuery{NewQuery(exec, mods...)}
}

// FindBraceletBraceletG retrieves a single record by ID.
func FindBraceletBraceletG(id int, selectCols ...string) (*BraceletBracelet, error) {
	return FindBraceletBracelet(boil.GetDB(), id, selectCols...)
}

// FindBraceletBraceletGP retrieves a single record by ID, and panics on error.
func FindBraceletBraceletGP(id int, selectCols ...string) *BraceletBracelet {
	retobj, err := FindBraceletBracelet(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletBracelet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletBracelet(exec boil.Executor, id int, selectCols ...string) (*BraceletBracelet, error) {
	braceletBraceletObj := &BraceletBracelet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_bracelet` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletBraceletObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_bracelet")
	}

	return braceletBraceletObj, nil
}

// FindBraceletBraceletP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletBraceletP(exec boil.Executor, id int, selectCols ...string) *BraceletBracelet {
	retobj, err := FindBraceletBracelet(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletBracelet) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletBracelet) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletBracelet) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletBracelet) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_bracelet provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletBraceletInsertCacheMut.RLock()
	cache, cached := braceletBraceletInsertCache[key]
	braceletBraceletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletBraceletColumns,
			braceletBraceletColumnsWithDefault,
			braceletBraceletColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_bracelet` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_bracelet` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_bracelet")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_bracelet")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletInsertCacheMut.Lock()
		braceletBraceletInsertCache[key] = cache
		braceletBraceletInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletBracelet record. See Update for
// whitelist behavior description.
func (o *BraceletBracelet) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletBracelet record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletBracelet) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletBracelet, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletBracelet) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletBracelet.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletBracelet) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletBraceletUpdateCacheMut.RLock()
	cache, cached := braceletBraceletUpdateCache[key]
	braceletBraceletUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletBraceletColumns, braceletBraceletPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_bracelet, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_bracelet` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, append(wl, braceletBraceletPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_bracelet row")
	}

	if !cached {
		braceletBraceletUpdateCacheMut.Lock()
		braceletBraceletUpdateCache[key] = cache
		braceletBraceletUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletBraceletQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletBraceletQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_bracelet")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletBraceletSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletBraceletSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_bracelet` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletPrimaryKeyColumns), len(colNames)+1, len(braceletBraceletPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletBracelet slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletBracelet) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletBracelet) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletBracelet) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletBracelet) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_bracelet provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletBraceletUpsertCacheMut.RLock()
	cache, cached := braceletBraceletUpsertCache[key]
	braceletBraceletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletBraceletColumns,
			braceletBraceletColumnsWithDefault,
			braceletBraceletColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletBraceletColumns,
			braceletBraceletPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_bracelet, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_bracelet", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_bracelet` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletBraceletType, braceletBraceletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_bracelet")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_bracelet")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletUpsertCacheMut.Lock()
		braceletBraceletUpsertCache[key] = cache
		braceletBraceletUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletBracelet record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBracelet) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletBracelet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletBracelet) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletBracelet provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletBracelet record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBracelet) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletBracelet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletBracelet) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBracelet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletBraceletPrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_bracelet` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_bracelet")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletBraceletQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletBraceletQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletBraceletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_bracelet")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletBraceletSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletBraceletSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletBracelet slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletBraceletSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletBraceletSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBracelet slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_bracelet` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletPrimaryKeyColumns), 1, len(braceletBraceletPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletBracelet slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletBracelet) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletBracelet) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletBracelet) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletBracelet provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletBracelet) Reload(exec boil.Executor) error {
	ret, err := FindBraceletBracelet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletBraceletSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletBracelets := BraceletBraceletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_bracelet`.* FROM `bracelet_bracelet` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletBraceletPrimaryKeyColumns), 1, len(braceletBraceletPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletBracelets)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletBraceletSlice")
	}

	*o = braceletBracelets

	return nil
}

// BraceletBraceletExists checks if the BraceletBracelet row exists.
func BraceletBraceletExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_bracelet` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_bracelet exists")
	}

	return exists, nil
}

// BraceletBraceletExistsG checks if the BraceletBracelet row exists.
func BraceletBraceletExistsG(id int) (bool, error) {
	return BraceletBraceletExists(boil.GetDB(), id)
}

// BraceletBraceletExistsGP checks if the BraceletBracelet row exists. Panics on error.
func BraceletBraceletExistsGP(id int) bool {
	e, err := BraceletBraceletExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletBraceletExistsP checks if the BraceletBracelet row exists. Panics on error.
func BraceletBraceletExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletBraceletExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
