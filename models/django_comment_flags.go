// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// DjangoCommentFlag is an object representing the database table.
type DjangoCommentFlag struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CommentID int       `boil:"comment_id" json:"comment_id" toml:"comment_id" yaml:"comment_id"`
	Flag      string    `boil:"flag" json:"flag" toml:"flag" yaml:"flag"`
	FlagDate  time.Time `boil:"flag_date" json:"flag_date" toml:"flag_date" yaml:"flag_date"`

	R *djangoCommentFlagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoCommentFlagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// djangoCommentFlagR is where relationships are stored.
type djangoCommentFlagR struct {
	Comment *DjangoComment
	User    *AuthUser
}

// djangoCommentFlagL is where Load methods for each relationship are stored.
type djangoCommentFlagL struct{}

var (
	djangoCommentFlagColumns               = []string{"id", "user_id", "comment_id", "flag", "flag_date"}
	djangoCommentFlagColumnsWithoutDefault = []string{"user_id", "comment_id", "flag", "flag_date"}
	djangoCommentFlagColumnsWithDefault    = []string{"id"}
	djangoCommentFlagPrimaryKeyColumns     = []string{"id"}
)

type (
	// DjangoCommentFlagSlice is an alias for a slice of pointers to DjangoCommentFlag.
	// This should generally be used opposed to []DjangoCommentFlag.
	DjangoCommentFlagSlice []*DjangoCommentFlag

	djangoCommentFlagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoCommentFlagType                 = reflect.TypeOf(&DjangoCommentFlag{})
	djangoCommentFlagMapping              = queries.MakeStructMapping(djangoCommentFlagType)
	djangoCommentFlagPrimaryKeyMapping, _ = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, djangoCommentFlagPrimaryKeyColumns)
	djangoCommentFlagInsertCacheMut       sync.RWMutex
	djangoCommentFlagInsertCache          = make(map[string]insertCache)
	djangoCommentFlagUpdateCacheMut       sync.RWMutex
	djangoCommentFlagUpdateCache          = make(map[string]updateCache)
	djangoCommentFlagUpsertCacheMut       sync.RWMutex
	djangoCommentFlagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single djangoCommentFlag record from the query, and panics on error.
func (q djangoCommentFlagQuery) OneP() *DjangoCommentFlag {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single djangoCommentFlag record from the query.
func (q djangoCommentFlagQuery) One() (*DjangoCommentFlag, error) {
	o := &DjangoCommentFlag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_comment_flags")
	}

	return o, nil
}

// AllP returns all DjangoCommentFlag records from the query, and panics on error.
func (q djangoCommentFlagQuery) AllP() DjangoCommentFlagSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all DjangoCommentFlag records from the query.
func (q djangoCommentFlagQuery) All() (DjangoCommentFlagSlice, error) {
	var o DjangoCommentFlagSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoCommentFlag slice")
	}

	return o, nil
}

// CountP returns the count of all DjangoCommentFlag records in the query, and panics on error.
func (q djangoCommentFlagQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all DjangoCommentFlag records in the query.
func (q djangoCommentFlagQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_comment_flags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q djangoCommentFlagQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q djangoCommentFlagQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_comment_flags exists")
	}

	return count > 0, nil
}

// CommentG pointed to by the foreign key.
func (o *DjangoCommentFlag) CommentG(mods ...qm.QueryMod) djangoCommentQuery {
	return o.Comment(boil.GetDB(), mods...)
}

// Comment pointed to by the foreign key.
func (o *DjangoCommentFlag) Comment(exec boil.Executor, mods ...qm.QueryMod) djangoCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CommentID),
	}

	queryMods = append(queryMods, mods...)

	query := DjangoComments(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_comments`")

	return query
}

// UserG pointed to by the foreign key.
func (o *DjangoCommentFlag) UserG(mods ...qm.QueryMod) authUserQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *DjangoCommentFlag) User(exec boil.Executor, mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user`")

	return query
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoCommentFlagL) LoadComment(e boil.Executor, singular bool, maybeDjangoCommentFlag interface{}) error {
	var slice []*DjangoCommentFlag
	var object *DjangoCommentFlag

	count := 1
	if singular {
		object = maybeDjangoCommentFlag.(*DjangoCommentFlag)
	} else {
		slice = *maybeDjangoCommentFlag.(*DjangoCommentFlagSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoCommentFlagR{}
		}
		args[0] = object.CommentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoCommentFlagR{}
			}
			args[i] = obj.CommentID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_comments` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DjangoComment")
	}
	defer results.Close()

	var resultSlice []*DjangoComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DjangoComment")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Comment = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommentID == foreign.ID {
				local.R.Comment = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoCommentFlagL) LoadUser(e boil.Executor, singular bool, maybeDjangoCommentFlag interface{}) error {
	var slice []*DjangoCommentFlag
	var object *DjangoCommentFlag

	count := 1
	if singular {
		object = maybeDjangoCommentFlag.(*DjangoCommentFlag)
	} else {
		slice = *maybeDjangoCommentFlag.(*DjangoCommentFlagSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoCommentFlagR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoCommentFlagR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}
	defer results.Close()

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetCommentG of the django_comment_flag to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentDjangoCommentFlags.
// Uses the global database handle.
func (o *DjangoCommentFlag) SetCommentG(insert bool, related *DjangoComment) error {
	return o.SetComment(boil.GetDB(), insert, related)
}

// SetCommentP of the django_comment_flag to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentDjangoCommentFlags.
// Panics on error.
func (o *DjangoCommentFlag) SetCommentP(exec boil.Executor, insert bool, related *DjangoComment) {
	if err := o.SetComment(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommentGP of the django_comment_flag to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentDjangoCommentFlags.
// Uses the global database handle and panics on error.
func (o *DjangoCommentFlag) SetCommentGP(insert bool, related *DjangoComment) {
	if err := o.SetComment(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetComment of the django_comment_flag to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentDjangoCommentFlags.
func (o *DjangoCommentFlag) SetComment(exec boil.Executor, insert bool, related *DjangoComment) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `django_comment_flags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"comment_id"}),
		strmangle.WhereClause("`", "`", 0, djangoCommentFlagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommentID = related.ID

	if o.R == nil {
		o.R = &djangoCommentFlagR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &djangoCommentR{
			CommentDjangoCommentFlags: DjangoCommentFlagSlice{o},
		}
	} else {
		related.R.CommentDjangoCommentFlags = append(related.R.CommentDjangoCommentFlags, o)
	}

	return nil
}

// SetUserG of the django_comment_flag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDjangoCommentFlags.
// Uses the global database handle.
func (o *DjangoCommentFlag) SetUserG(insert bool, related *AuthUser) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the django_comment_flag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDjangoCommentFlags.
// Panics on error.
func (o *DjangoCommentFlag) SetUserP(exec boil.Executor, insert bool, related *AuthUser) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the django_comment_flag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDjangoCommentFlags.
// Uses the global database handle and panics on error.
func (o *DjangoCommentFlag) SetUserGP(insert bool, related *AuthUser) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the django_comment_flag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDjangoCommentFlags.
func (o *DjangoCommentFlag) SetUser(exec boil.Executor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `django_comment_flags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, djangoCommentFlagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &djangoCommentFlagR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserDjangoCommentFlags: DjangoCommentFlagSlice{o},
		}
	} else {
		related.R.UserDjangoCommentFlags = append(related.R.UserDjangoCommentFlags, o)
	}

	return nil
}

// DjangoCommentFlagsG retrieves all records.
func DjangoCommentFlagsG(mods ...qm.QueryMod) djangoCommentFlagQuery {
	return DjangoCommentFlags(boil.GetDB(), mods...)
}

// DjangoCommentFlags retrieves all the records using an executor.
func DjangoCommentFlags(exec boil.Executor, mods ...qm.QueryMod) djangoCommentFlagQuery {
	mods = append(mods, qm.From("`django_comment_flags`"))
	return djangoCommentFlagQuery{NewQuery(exec, mods...)}
}

// FindDjangoCommentFlagG retrieves a single record by ID.
func FindDjangoCommentFlagG(id int, selectCols ...string) (*DjangoCommentFlag, error) {
	return FindDjangoCommentFlag(boil.GetDB(), id, selectCols...)
}

// FindDjangoCommentFlagGP retrieves a single record by ID, and panics on error.
func FindDjangoCommentFlagGP(id int, selectCols ...string) *DjangoCommentFlag {
	retobj, err := FindDjangoCommentFlag(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDjangoCommentFlag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoCommentFlag(exec boil.Executor, id int, selectCols ...string) (*DjangoCommentFlag, error) {
	djangoCommentFlagObj := &DjangoCommentFlag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `django_comment_flags` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(djangoCommentFlagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_comment_flags")
	}

	return djangoCommentFlagObj, nil
}

// FindDjangoCommentFlagP retrieves a single record by ID with an executor, and panics on error.
func FindDjangoCommentFlagP(exec boil.Executor, id int, selectCols ...string) *DjangoCommentFlag {
	retobj, err := FindDjangoCommentFlag(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DjangoCommentFlag) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *DjangoCommentFlag) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *DjangoCommentFlag) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *DjangoCommentFlag) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_comment_flags provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoCommentFlagColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	djangoCommentFlagInsertCacheMut.RLock()
	cache, cached := djangoCommentFlagInsertCache[key]
	djangoCommentFlagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			djangoCommentFlagColumns,
			djangoCommentFlagColumnsWithDefault,
			djangoCommentFlagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `django_comment_flags` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `django_comment_flags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, djangoCommentFlagPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_comment_flags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoCommentFlagMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_comment_flags")
	}

CacheNoHooks:
	if !cached {
		djangoCommentFlagInsertCacheMut.Lock()
		djangoCommentFlagInsertCache[key] = cache
		djangoCommentFlagInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DjangoCommentFlag record. See Update for
// whitelist behavior description.
func (o *DjangoCommentFlag) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single DjangoCommentFlag record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *DjangoCommentFlag) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the DjangoCommentFlag, and panics on error.
// See Update for whitelist behavior description.
func (o *DjangoCommentFlag) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the DjangoCommentFlag.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *DjangoCommentFlag) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	djangoCommentFlagUpdateCacheMut.RLock()
	cache, cached := djangoCommentFlagUpdateCache[key]
	djangoCommentFlagUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(djangoCommentFlagColumns, djangoCommentFlagPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update django_comment_flags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `django_comment_flags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, djangoCommentFlagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, append(wl, djangoCommentFlagPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update django_comment_flags row")
	}

	if !cached {
		djangoCommentFlagUpdateCacheMut.Lock()
		djangoCommentFlagUpdateCache[key] = cache
		djangoCommentFlagUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q djangoCommentFlagQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q djangoCommentFlagQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for django_comment_flags")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DjangoCommentFlagSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DjangoCommentFlagSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DjangoCommentFlagSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoCommentFlagSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCommentFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `django_comment_flags` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoCommentFlagPrimaryKeyColumns), len(colNames)+1, len(djangoCommentFlagPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in djangoCommentFlag slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DjangoCommentFlag) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *DjangoCommentFlag) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *DjangoCommentFlag) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DjangoCommentFlag) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_comment_flags provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoCommentFlagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoCommentFlagUpsertCacheMut.RLock()
	cache, cached := djangoCommentFlagUpsertCache[key]
	djangoCommentFlagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			djangoCommentFlagColumns,
			djangoCommentFlagColumnsWithDefault,
			djangoCommentFlagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			djangoCommentFlagColumns,
			djangoCommentFlagPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert django_comment_flags, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "django_comment_flags", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `django_comment_flags` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoCommentFlagType, djangoCommentFlagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for django_comment_flags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoCommentFlagMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_comment_flags")
	}

CacheNoHooks:
	if !cached {
		djangoCommentFlagUpsertCacheMut.Lock()
		djangoCommentFlagUpsertCache[key] = cache
		djangoCommentFlagUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single DjangoCommentFlag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoCommentFlag) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single DjangoCommentFlag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DjangoCommentFlag) DeleteG() error {
	if o == nil {
		return errors.New("models: no DjangoCommentFlag provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single DjangoCommentFlag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoCommentFlag) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single DjangoCommentFlag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoCommentFlag) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoCommentFlag provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoCommentFlagPrimaryKeyMapping)
	sql := "DELETE FROM `django_comment_flags` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from django_comment_flags")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q djangoCommentFlagQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q djangoCommentFlagQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no djangoCommentFlagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from django_comment_flags")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DjangoCommentFlagSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DjangoCommentFlagSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no DjangoCommentFlag slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DjangoCommentFlagSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoCommentFlagSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoCommentFlag slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCommentFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `django_comment_flags` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoCommentFlagPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoCommentFlagPrimaryKeyColumns), 1, len(djangoCommentFlagPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from djangoCommentFlag slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *DjangoCommentFlag) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *DjangoCommentFlag) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DjangoCommentFlag) ReloadG() error {
	if o == nil {
		return errors.New("models: no DjangoCommentFlag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoCommentFlag) Reload(exec boil.Executor) error {
	ret, err := FindDjangoCommentFlag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoCommentFlagSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoCommentFlagSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCommentFlagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DjangoCommentFlagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoCommentFlagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	djangoCommentFlags := DjangoCommentFlagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoCommentFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `django_comment_flags`.* FROM `django_comment_flags` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoCommentFlagPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(djangoCommentFlagPrimaryKeyColumns), 1, len(djangoCommentFlagPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&djangoCommentFlags)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoCommentFlagSlice")
	}

	*o = djangoCommentFlags

	return nil
}

// DjangoCommentFlagExists checks if the DjangoCommentFlag row exists.
func DjangoCommentFlagExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `django_comment_flags` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_comment_flags exists")
	}

	return exists, nil
}

// DjangoCommentFlagExistsG checks if the DjangoCommentFlag row exists.
func DjangoCommentFlagExistsG(id int) (bool, error) {
	return DjangoCommentFlagExists(boil.GetDB(), id)
}

// DjangoCommentFlagExistsGP checks if the DjangoCommentFlag row exists. Panics on error.
func DjangoCommentFlagExistsGP(id int) bool {
	e, err := DjangoCommentFlagExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DjangoCommentFlagExistsP checks if the DjangoCommentFlag row exists. Panics on error.
func DjangoCommentFlagExistsP(exec boil.Executor, id int) bool {
	e, err := DjangoCommentFlagExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
