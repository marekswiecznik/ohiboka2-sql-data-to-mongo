// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// DjangoContentType is an object representing the database table.
type DjangoContentType struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	AppLabel string `boil:"app_label" json:"app_label" toml:"app_label" yaml:"app_label"`
	Model    string `boil:"model" json:"model" toml:"model" yaml:"model"`

	R *djangoContentTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoContentTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// djangoContentTypeR is where relationships are stored.
type djangoContentTypeR struct {
	ContentTypeAuthPermissions AuthPermissionSlice
	ContentTypeDjangoAdminLogs DjangoAdminLogSlice
	ContentTypeDjangoComments  DjangoCommentSlice
}

// djangoContentTypeL is where Load methods for each relationship are stored.
type djangoContentTypeL struct{}

var (
	djangoContentTypeColumns               = []string{"id", "name", "app_label", "model"}
	djangoContentTypeColumnsWithoutDefault = []string{"name", "app_label", "model"}
	djangoContentTypeColumnsWithDefault    = []string{"id"}
	djangoContentTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// DjangoContentTypeSlice is an alias for a slice of pointers to DjangoContentType.
	// This should generally be used opposed to []DjangoContentType.
	DjangoContentTypeSlice []*DjangoContentType

	djangoContentTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoContentTypeType                 = reflect.TypeOf(&DjangoContentType{})
	djangoContentTypeMapping              = queries.MakeStructMapping(djangoContentTypeType)
	djangoContentTypePrimaryKeyMapping, _ = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, djangoContentTypePrimaryKeyColumns)
	djangoContentTypeInsertCacheMut       sync.RWMutex
	djangoContentTypeInsertCache          = make(map[string]insertCache)
	djangoContentTypeUpdateCacheMut       sync.RWMutex
	djangoContentTypeUpdateCache          = make(map[string]updateCache)
	djangoContentTypeUpsertCacheMut       sync.RWMutex
	djangoContentTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single djangoContentType record from the query, and panics on error.
func (q djangoContentTypeQuery) OneP() *DjangoContentType {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single djangoContentType record from the query.
func (q djangoContentTypeQuery) One() (*DjangoContentType, error) {
	o := &DjangoContentType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_content_type")
	}

	return o, nil
}

// AllP returns all DjangoContentType records from the query, and panics on error.
func (q djangoContentTypeQuery) AllP() DjangoContentTypeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all DjangoContentType records from the query.
func (q djangoContentTypeQuery) All() (DjangoContentTypeSlice, error) {
	var o DjangoContentTypeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoContentType slice")
	}

	return o, nil
}

// CountP returns the count of all DjangoContentType records in the query, and panics on error.
func (q djangoContentTypeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all DjangoContentType records in the query.
func (q djangoContentTypeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_content_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q djangoContentTypeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q djangoContentTypeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_content_type exists")
	}

	return count > 0, nil
}

// ContentTypeAuthPermissionsG retrieves all the auth_permission's auth permission via content_type_id column.
func (o *DjangoContentType) ContentTypeAuthPermissionsG(mods ...qm.QueryMod) authPermissionQuery {
	return o.ContentTypeAuthPermissions(boil.GetDB(), mods...)
}

// ContentTypeAuthPermissions retrieves all the auth_permission's auth permission with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeAuthPermissions(exec boil.Executor, mods ...qm.QueryMod) authPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`content_type_id`=?", o.ID),
	)

	query := AuthPermissions(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_permission` as `a`")
	return query
}

// ContentTypeDjangoAdminLogsG retrieves all the django_admin_log's django admin log via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoAdminLogsG(mods ...qm.QueryMod) djangoAdminLogQuery {
	return o.ContentTypeDjangoAdminLogs(boil.GetDB(), mods...)
}

// ContentTypeDjangoAdminLogs retrieves all the django_admin_log's django admin log with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoAdminLogs(exec boil.Executor, mods ...qm.QueryMod) djangoAdminLogQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`content_type_id`=?", o.ID),
	)

	query := DjangoAdminLogs(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_admin_log` as `a`")
	return query
}

// ContentTypeDjangoCommentsG retrieves all the django_comment's django comments via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoCommentsG(mods ...qm.QueryMod) djangoCommentQuery {
	return o.ContentTypeDjangoComments(boil.GetDB(), mods...)
}

// ContentTypeDjangoComments retrieves all the django_comment's django comments with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoComments(exec boil.Executor, mods ...qm.QueryMod) djangoCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`content_type_id`=?", o.ID),
	)

	query := DjangoComments(exec, queryMods...)
	queries.SetFrom(query.Query, "`django_comments` as `a`")
	return query
}

// LoadContentTypeAuthPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoContentTypeL) LoadContentTypeAuthPermissions(e boil.Executor, singular bool, maybeDjangoContentType interface{}) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	count := 1
	if singular {
		object = maybeDjangoContentType.(*DjangoContentType)
	} else {
		slice = *maybeDjangoContentType.(*DjangoContentTypeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_permission` where `content_type_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_permission")
	}
	defer results.Close()

	var resultSlice []*AuthPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_permission")
	}

	if singular {
		object.R.ContentTypeAuthPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentTypeID {
				local.R.ContentTypeAuthPermissions = append(local.R.ContentTypeAuthPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContentTypeDjangoAdminLogs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoContentTypeL) LoadContentTypeDjangoAdminLogs(e boil.Executor, singular bool, maybeDjangoContentType interface{}) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	count := 1
	if singular {
		object = maybeDjangoContentType.(*DjangoContentType)
	} else {
		slice = *maybeDjangoContentType.(*DjangoContentTypeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_admin_log` where `content_type_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_admin_log")
	}
	defer results.Close()

	var resultSlice []*DjangoAdminLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_admin_log")
	}

	if singular {
		object.R.ContentTypeDjangoAdminLogs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentTypeID.Int {
				local.R.ContentTypeDjangoAdminLogs = append(local.R.ContentTypeDjangoAdminLogs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContentTypeDjangoComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (djangoContentTypeL) LoadContentTypeDjangoComments(e boil.Executor, singular bool, maybeDjangoContentType interface{}) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	count := 1
	if singular {
		object = maybeDjangoContentType.(*DjangoContentType)
	} else {
		slice = *maybeDjangoContentType.(*DjangoContentTypeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `django_comments` where `content_type_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_comments")
	}
	defer results.Close()

	var resultSlice []*DjangoComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_comments")
	}

	if singular {
		object.R.ContentTypeDjangoComments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentTypeID {
				local.R.ContentTypeDjangoComments = append(local.R.ContentTypeDjangoComments, foreign)
				break
			}
		}
	}

	return nil
}

// AddContentTypeAuthPermissionsG adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
// Uses the global database handle.
func (o *DjangoContentType) AddContentTypeAuthPermissionsG(insert bool, related ...*AuthPermission) error {
	return o.AddContentTypeAuthPermissions(boil.GetDB(), insert, related...)
}

// AddContentTypeAuthPermissionsP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
// Panics on error.
func (o *DjangoContentType) AddContentTypeAuthPermissionsP(exec boil.Executor, insert bool, related ...*AuthPermission) {
	if err := o.AddContentTypeAuthPermissions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeAuthPermissionsGP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
// Uses the global database handle and panics on error.
func (o *DjangoContentType) AddContentTypeAuthPermissionsGP(insert bool, related ...*AuthPermission) {
	if err := o.AddContentTypeAuthPermissions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeAuthPermissions adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeAuthPermissions(exec boil.Executor, insert bool, related ...*AuthPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentTypeID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `auth_permission` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"content_type_id"}),
				strmangle.WhereClause("`", "`", 0, authPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeAuthPermissions: related,
		}
	} else {
		o.R.ContentTypeAuthPermissions = append(o.R.ContentTypeAuthPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authPermissionR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// AddContentTypeDjangoAdminLogsG adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
// Uses the global database handle.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogsG(insert bool, related ...*DjangoAdminLog) error {
	return o.AddContentTypeDjangoAdminLogs(boil.GetDB(), insert, related...)
}

// AddContentTypeDjangoAdminLogsP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
// Panics on error.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogsP(exec boil.Executor, insert bool, related ...*DjangoAdminLog) {
	if err := o.AddContentTypeDjangoAdminLogs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeDjangoAdminLogsGP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
// Uses the global database handle and panics on error.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogsGP(insert bool, related ...*DjangoAdminLog) {
	if err := o.AddContentTypeDjangoAdminLogs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeDjangoAdminLogs adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentTypeID.Int = o.ID
			rel.ContentTypeID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_admin_log` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"content_type_id"}),
				strmangle.WhereClause("`", "`", 0, djangoAdminLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentTypeID.Int = o.ID
			rel.ContentTypeID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeDjangoAdminLogs: related,
		}
	} else {
		o.R.ContentTypeDjangoAdminLogs = append(o.R.ContentTypeDjangoAdminLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoAdminLogR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// SetContentTypeDjangoAdminLogsG removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Uses the global database handle.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogsG(insert bool, related ...*DjangoAdminLog) error {
	return o.SetContentTypeDjangoAdminLogs(boil.GetDB(), insert, related...)
}

// SetContentTypeDjangoAdminLogsP removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Panics on error.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogsP(exec boil.Executor, insert bool, related ...*DjangoAdminLog) {
	if err := o.SetContentTypeDjangoAdminLogs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContentTypeDjangoAdminLogsGP removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Uses the global database handle and panics on error.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogsGP(insert bool, related ...*DjangoAdminLog) {
	if err := o.SetContentTypeDjangoAdminLogs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContentTypeDjangoAdminLogs removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogs(exec boil.Executor, insert bool, related ...*DjangoAdminLog) error {
	query := "update `django_admin_log` set `content_type_id` = null where `content_type_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ContentTypeDjangoAdminLogs {
			rel.ContentTypeID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.ContentType = nil
		}

		o.R.ContentTypeDjangoAdminLogs = nil
	}
	return o.AddContentTypeDjangoAdminLogs(exec, insert, related...)
}

// RemoveContentTypeDjangoAdminLogsG relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
// Uses the global database handle.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogsG(related ...*DjangoAdminLog) error {
	return o.RemoveContentTypeDjangoAdminLogs(boil.GetDB(), related...)
}

// RemoveContentTypeDjangoAdminLogsP relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
// Panics on error.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogsP(exec boil.Executor, related ...*DjangoAdminLog) {
	if err := o.RemoveContentTypeDjangoAdminLogs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveContentTypeDjangoAdminLogsGP relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
// Uses the global database handle and panics on error.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogsGP(related ...*DjangoAdminLog) {
	if err := o.RemoveContentTypeDjangoAdminLogs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveContentTypeDjangoAdminLogs relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogs(exec boil.Executor, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		rel.ContentTypeID.Valid = false
		if rel.R != nil {
			rel.R.ContentType = nil
		}
		if err = rel.Update(exec, "content_type_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContentTypeDjangoAdminLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContentTypeDjangoAdminLogs)
			if ln > 1 && i < ln-1 {
				o.R.ContentTypeDjangoAdminLogs[i] = o.R.ContentTypeDjangoAdminLogs[ln-1]
			}
			o.R.ContentTypeDjangoAdminLogs = o.R.ContentTypeDjangoAdminLogs[:ln-1]
			break
		}
	}

	return nil
}

// AddContentTypeDjangoCommentsG adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoComments.
// Sets related.R.ContentType appropriately.
// Uses the global database handle.
func (o *DjangoContentType) AddContentTypeDjangoCommentsG(insert bool, related ...*DjangoComment) error {
	return o.AddContentTypeDjangoComments(boil.GetDB(), insert, related...)
}

// AddContentTypeDjangoCommentsP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoComments.
// Sets related.R.ContentType appropriately.
// Panics on error.
func (o *DjangoContentType) AddContentTypeDjangoCommentsP(exec boil.Executor, insert bool, related ...*DjangoComment) {
	if err := o.AddContentTypeDjangoComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeDjangoCommentsGP adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoComments.
// Sets related.R.ContentType appropriately.
// Uses the global database handle and panics on error.
func (o *DjangoContentType) AddContentTypeDjangoCommentsGP(insert bool, related ...*DjangoComment) {
	if err := o.AddContentTypeDjangoComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContentTypeDjangoComments adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoComments.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeDjangoComments(exec boil.Executor, insert bool, related ...*DjangoComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentTypeID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `django_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"content_type_id"}),
				strmangle.WhereClause("`", "`", 0, djangoCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeDjangoComments: related,
		}
	} else {
		o.R.ContentTypeDjangoComments = append(o.R.ContentTypeDjangoComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoCommentR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// DjangoContentTypesG retrieves all records.
func DjangoContentTypesG(mods ...qm.QueryMod) djangoContentTypeQuery {
	return DjangoContentTypes(boil.GetDB(), mods...)
}

// DjangoContentTypes retrieves all the records using an executor.
func DjangoContentTypes(exec boil.Executor, mods ...qm.QueryMod) djangoContentTypeQuery {
	mods = append(mods, qm.From("`django_content_type`"))
	return djangoContentTypeQuery{NewQuery(exec, mods...)}
}

// FindDjangoContentTypeG retrieves a single record by ID.
func FindDjangoContentTypeG(id int, selectCols ...string) (*DjangoContentType, error) {
	return FindDjangoContentType(boil.GetDB(), id, selectCols...)
}

// FindDjangoContentTypeGP retrieves a single record by ID, and panics on error.
func FindDjangoContentTypeGP(id int, selectCols ...string) *DjangoContentType {
	retobj, err := FindDjangoContentType(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDjangoContentType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoContentType(exec boil.Executor, id int, selectCols ...string) (*DjangoContentType, error) {
	djangoContentTypeObj := &DjangoContentType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `django_content_type` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(djangoContentTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_content_type")
	}

	return djangoContentTypeObj, nil
}

// FindDjangoContentTypeP retrieves a single record by ID with an executor, and panics on error.
func FindDjangoContentTypeP(exec boil.Executor, id int, selectCols ...string) *DjangoContentType {
	retobj, err := FindDjangoContentType(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DjangoContentType) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *DjangoContentType) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *DjangoContentType) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *DjangoContentType) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_content_type provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	djangoContentTypeInsertCacheMut.RLock()
	cache, cached := djangoContentTypeInsertCache[key]
	djangoContentTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			djangoContentTypeColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `django_content_type` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `django_content_type` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, djangoContentTypePrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_content_type")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoContentTypeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_content_type")
	}

CacheNoHooks:
	if !cached {
		djangoContentTypeInsertCacheMut.Lock()
		djangoContentTypeInsertCache[key] = cache
		djangoContentTypeInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DjangoContentType record. See Update for
// whitelist behavior description.
func (o *DjangoContentType) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single DjangoContentType record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *DjangoContentType) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the DjangoContentType, and panics on error.
// See Update for whitelist behavior description.
func (o *DjangoContentType) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the DjangoContentType.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *DjangoContentType) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	djangoContentTypeUpdateCacheMut.RLock()
	cache, cached := djangoContentTypeUpdateCache[key]
	djangoContentTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(djangoContentTypeColumns, djangoContentTypePrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update django_content_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `django_content_type` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, djangoContentTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, append(wl, djangoContentTypePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update django_content_type row")
	}

	if !cached {
		djangoContentTypeUpdateCacheMut.Lock()
		djangoContentTypeUpdateCache[key] = cache
		djangoContentTypeUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q djangoContentTypeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q djangoContentTypeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for django_content_type")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DjangoContentTypeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DjangoContentTypeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DjangoContentTypeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoContentTypeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `django_content_type` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoContentTypePrimaryKeyColumns), len(colNames)+1, len(djangoContentTypePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in djangoContentType slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DjangoContentType) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *DjangoContentType) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *DjangoContentType) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DjangoContentType) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no django_content_type provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoContentTypeUpsertCacheMut.RLock()
	cache, cached := djangoContentTypeUpsertCache[key]
	djangoContentTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			djangoContentTypeColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			djangoContentTypeColumns,
			djangoContentTypePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert django_content_type, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "django_content_type", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `django_content_type` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for django_content_type")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == djangoContentTypeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for django_content_type")
	}

CacheNoHooks:
	if !cached {
		djangoContentTypeUpsertCacheMut.Lock()
		djangoContentTypeUpsertCache[key] = cache
		djangoContentTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single DjangoContentType record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoContentType) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single DjangoContentType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DjangoContentType) DeleteG() error {
	if o == nil {
		return errors.New("models: no DjangoContentType provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single DjangoContentType record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *DjangoContentType) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single DjangoContentType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoContentType) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoContentType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoContentTypePrimaryKeyMapping)
	sql := "DELETE FROM `django_content_type` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from django_content_type")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q djangoContentTypeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q djangoContentTypeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no djangoContentTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from django_content_type")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DjangoContentTypeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DjangoContentTypeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no DjangoContentType slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DjangoContentTypeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoContentTypeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no DjangoContentType slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `django_content_type` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoContentTypePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(djangoContentTypePrimaryKeyColumns), 1, len(djangoContentTypePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from djangoContentType slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *DjangoContentType) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *DjangoContentType) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DjangoContentType) ReloadG() error {
	if o == nil {
		return errors.New("models: no DjangoContentType provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoContentType) Reload(exec boil.Executor) error {
	ret, err := FindDjangoContentType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoContentTypeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DjangoContentTypeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoContentTypeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DjangoContentTypeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoContentTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	djangoContentTypes := DjangoContentTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `django_content_type`.* FROM `django_content_type` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, djangoContentTypePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(djangoContentTypePrimaryKeyColumns), 1, len(djangoContentTypePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&djangoContentTypes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoContentTypeSlice")
	}

	*o = djangoContentTypes

	return nil
}

// DjangoContentTypeExists checks if the DjangoContentType row exists.
func DjangoContentTypeExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `django_content_type` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_content_type exists")
	}

	return exists, nil
}

// DjangoContentTypeExistsG checks if the DjangoContentType row exists.
func DjangoContentTypeExistsG(id int) (bool, error) {
	return DjangoContentTypeExists(boil.GetDB(), id)
}

// DjangoContentTypeExistsGP checks if the DjangoContentType row exists. Panics on error.
func DjangoContentTypeExistsGP(id int) bool {
	e, err := DjangoContentTypeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DjangoContentTypeExistsP checks if the DjangoContentType row exists. Panics on error.
func DjangoContentTypeExistsP(exec boil.Executor, id int) bool {
	e, err := DjangoContentTypeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
