// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// BraceletBraceletknot is an object representing the database table.
type BraceletBraceletknot struct {
	ID         int `boil:"id" json:"id" toml:"id" yaml:"id"`
	Index      int `boil:"index" json:"index" toml:"index" yaml:"index"`
	BraceletID int `boil:"bracelet_id" json:"bracelet_id" toml:"bracelet_id" yaml:"bracelet_id"`
	KnottypeID int `boil:"knottype_id" json:"knottype_id" toml:"knottype_id" yaml:"knottype_id"`

	R *braceletBraceletknotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletBraceletknotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletBraceletknotR is where relationships are stored.
type braceletBraceletknotR struct {
	Bracelet *BraceletBracelet
	Knottype *BraceletBraceletknottype
}

// braceletBraceletknotL is where Load methods for each relationship are stored.
type braceletBraceletknotL struct{}

var (
	braceletBraceletknotColumns               = []string{"id", "index", "bracelet_id", "knottype_id"}
	braceletBraceletknotColumnsWithoutDefault = []string{"index", "bracelet_id", "knottype_id"}
	braceletBraceletknotColumnsWithDefault    = []string{"id"}
	braceletBraceletknotPrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletBraceletknotSlice is an alias for a slice of pointers to BraceletBraceletknot.
	// This should generally be used opposed to []BraceletBraceletknot.
	BraceletBraceletknotSlice []*BraceletBraceletknot

	braceletBraceletknotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletBraceletknotType                 = reflect.TypeOf(&BraceletBraceletknot{})
	braceletBraceletknotMapping              = queries.MakeStructMapping(braceletBraceletknotType)
	braceletBraceletknotPrimaryKeyMapping, _ = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, braceletBraceletknotPrimaryKeyColumns)
	braceletBraceletknotInsertCacheMut       sync.RWMutex
	braceletBraceletknotInsertCache          = make(map[string]insertCache)
	braceletBraceletknotUpdateCacheMut       sync.RWMutex
	braceletBraceletknotUpdateCache          = make(map[string]updateCache)
	braceletBraceletknotUpsertCacheMut       sync.RWMutex
	braceletBraceletknotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletBraceletknot record from the query, and panics on error.
func (q braceletBraceletknotQuery) OneP() *BraceletBraceletknot {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletBraceletknot record from the query.
func (q braceletBraceletknotQuery) One() (*BraceletBraceletknot, error) {
	o := &BraceletBraceletknot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_braceletknot")
	}

	return o, nil
}

// AllP returns all BraceletBraceletknot records from the query, and panics on error.
func (q braceletBraceletknotQuery) AllP() BraceletBraceletknotSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletBraceletknot records from the query.
func (q braceletBraceletknotQuery) All() (BraceletBraceletknotSlice, error) {
	var o BraceletBraceletknotSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletBraceletknot slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletBraceletknot records in the query, and panics on error.
func (q braceletBraceletknotQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletBraceletknot records in the query.
func (q braceletBraceletknotQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_braceletknot rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletBraceletknotQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletBraceletknotQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_braceletknot exists")
	}

	return count > 0, nil
}

// BraceletG pointed to by the foreign key.
func (o *BraceletBraceletknot) BraceletG(mods ...qm.QueryMod) braceletBraceletQuery {
	return o.Bracelet(boil.GetDB(), mods...)
}

// Bracelet pointed to by the foreign key.
func (o *BraceletBraceletknot) Bracelet(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BraceletID),
	}

	queryMods = append(queryMods, mods...)

	query := BraceletBracelets(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_bracelet`")

	return query
}

// KnottypeG pointed to by the foreign key.
func (o *BraceletBraceletknot) KnottypeG(mods ...qm.QueryMod) braceletBraceletknottypeQuery {
	return o.Knottype(boil.GetDB(), mods...)
}

// Knottype pointed to by the foreign key.
func (o *BraceletBraceletknot) Knottype(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletknottypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.KnottypeID),
	}

	queryMods = append(queryMods, mods...)

	query := BraceletBraceletknottypes(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_braceletknottype`")

	return query
}

// LoadBracelet allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletknotL) LoadBracelet(e boil.Executor, singular bool, maybeBraceletBraceletknot interface{}) error {
	var slice []*BraceletBraceletknot
	var object *BraceletBraceletknot

	count := 1
	if singular {
		object = maybeBraceletBraceletknot.(*BraceletBraceletknot)
	} else {
		slice = *maybeBraceletBraceletknot.(*BraceletBraceletknotSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletknotR{}
		}
		args[0] = object.BraceletID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletknotR{}
			}
			args[i] = obj.BraceletID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_bracelet` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BraceletBracelet")
	}
	defer results.Close()

	var resultSlice []*BraceletBracelet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BraceletBracelet")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Bracelet = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BraceletID == foreign.ID {
				local.R.Bracelet = foreign
				break
			}
		}
	}

	return nil
}

// LoadKnottype allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletBraceletknotL) LoadKnottype(e boil.Executor, singular bool, maybeBraceletBraceletknot interface{}) error {
	var slice []*BraceletBraceletknot
	var object *BraceletBraceletknot

	count := 1
	if singular {
		object = maybeBraceletBraceletknot.(*BraceletBraceletknot)
	} else {
		slice = *maybeBraceletBraceletknot.(*BraceletBraceletknotSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletBraceletknotR{}
		}
		args[0] = object.KnottypeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletBraceletknotR{}
			}
			args[i] = obj.KnottypeID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_braceletknottype` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BraceletBraceletknottype")
	}
	defer results.Close()

	var resultSlice []*BraceletBraceletknottype
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BraceletBraceletknottype")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Knottype = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.KnottypeID == foreign.ID {
				local.R.Knottype = foreign
				break
			}
		}
	}

	return nil
}

// SetBraceletG of the bracelet_braceletknot to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletBraceletknots.
// Uses the global database handle.
func (o *BraceletBraceletknot) SetBraceletG(insert bool, related *BraceletBracelet) error {
	return o.SetBracelet(boil.GetDB(), insert, related)
}

// SetBraceletP of the bracelet_braceletknot to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletBraceletknots.
// Panics on error.
func (o *BraceletBraceletknot) SetBraceletP(exec boil.Executor, insert bool, related *BraceletBracelet) {
	if err := o.SetBracelet(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBraceletGP of the bracelet_braceletknot to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletBraceletknots.
// Uses the global database handle and panics on error.
func (o *BraceletBraceletknot) SetBraceletGP(insert bool, related *BraceletBracelet) {
	if err := o.SetBracelet(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBracelet of the bracelet_braceletknot to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletBraceletknots.
func (o *BraceletBraceletknot) SetBracelet(exec boil.Executor, insert bool, related *BraceletBracelet) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_braceletknot` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
		strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BraceletID = related.ID

	if o.R == nil {
		o.R = &braceletBraceletknotR{
			Bracelet: related,
		}
	} else {
		o.R.Bracelet = related
	}

	if related.R == nil {
		related.R = &braceletBraceletR{
			BraceletBraceletBraceletknots: BraceletBraceletknotSlice{o},
		}
	} else {
		related.R.BraceletBraceletBraceletknots = append(related.R.BraceletBraceletBraceletknots, o)
	}

	return nil
}

// SetKnottypeG of the bracelet_braceletknot to the related item.
// Sets o.R.Knottype to related.
// Adds o to related.R.KnottypeBraceletBraceletknots.
// Uses the global database handle.
func (o *BraceletBraceletknot) SetKnottypeG(insert bool, related *BraceletBraceletknottype) error {
	return o.SetKnottype(boil.GetDB(), insert, related)
}

// SetKnottypeP of the bracelet_braceletknot to the related item.
// Sets o.R.Knottype to related.
// Adds o to related.R.KnottypeBraceletBraceletknots.
// Panics on error.
func (o *BraceletBraceletknot) SetKnottypeP(exec boil.Executor, insert bool, related *BraceletBraceletknottype) {
	if err := o.SetKnottype(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetKnottypeGP of the bracelet_braceletknot to the related item.
// Sets o.R.Knottype to related.
// Adds o to related.R.KnottypeBraceletBraceletknots.
// Uses the global database handle and panics on error.
func (o *BraceletBraceletknot) SetKnottypeGP(insert bool, related *BraceletBraceletknottype) {
	if err := o.SetKnottype(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetKnottype of the bracelet_braceletknot to the related item.
// Sets o.R.Knottype to related.
// Adds o to related.R.KnottypeBraceletBraceletknots.
func (o *BraceletBraceletknot) SetKnottype(exec boil.Executor, insert bool, related *BraceletBraceletknottype) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_braceletknot` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"knottype_id"}),
		strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.KnottypeID = related.ID

	if o.R == nil {
		o.R = &braceletBraceletknotR{
			Knottype: related,
		}
	} else {
		o.R.Knottype = related
	}

	if related.R == nil {
		related.R = &braceletBraceletknottypeR{
			KnottypeBraceletBraceletknots: BraceletBraceletknotSlice{o},
		}
	} else {
		related.R.KnottypeBraceletBraceletknots = append(related.R.KnottypeBraceletBraceletknots, o)
	}

	return nil
}

// BraceletBraceletknotsG retrieves all records.
func BraceletBraceletknotsG(mods ...qm.QueryMod) braceletBraceletknotQuery {
	return BraceletBraceletknots(boil.GetDB(), mods...)
}

// BraceletBraceletknots retrieves all the records using an executor.
func BraceletBraceletknots(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletknotQuery {
	mods = append(mods, qm.From("`bracelet_braceletknot`"))
	return braceletBraceletknotQuery{NewQuery(exec, mods...)}
}

// FindBraceletBraceletknotG retrieves a single record by ID.
func FindBraceletBraceletknotG(id int, selectCols ...string) (*BraceletBraceletknot, error) {
	return FindBraceletBraceletknot(boil.GetDB(), id, selectCols...)
}

// FindBraceletBraceletknotGP retrieves a single record by ID, and panics on error.
func FindBraceletBraceletknotGP(id int, selectCols ...string) *BraceletBraceletknot {
	retobj, err := FindBraceletBraceletknot(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletBraceletknot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletBraceletknot(exec boil.Executor, id int, selectCols ...string) (*BraceletBraceletknot, error) {
	braceletBraceletknotObj := &BraceletBraceletknot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_braceletknot` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletBraceletknotObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_braceletknot")
	}

	return braceletBraceletknotObj, nil
}

// FindBraceletBraceletknotP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletBraceletknotP(exec boil.Executor, id int, selectCols ...string) *BraceletBraceletknot {
	retobj, err := FindBraceletBraceletknot(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletBraceletknot) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletBraceletknot) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletBraceletknot) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletBraceletknot) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletknot provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletknotColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletBraceletknotInsertCacheMut.RLock()
	cache, cached := braceletBraceletknotInsertCache[key]
	braceletBraceletknotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletBraceletknotColumns,
			braceletBraceletknotColumnsWithDefault,
			braceletBraceletknotColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_braceletknot` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_braceletknot` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_braceletknot")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletknotMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletknot")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletknotInsertCacheMut.Lock()
		braceletBraceletknotInsertCache[key] = cache
		braceletBraceletknotInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletBraceletknot record. See Update for
// whitelist behavior description.
func (o *BraceletBraceletknot) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletBraceletknot record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletBraceletknot) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletBraceletknot, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletBraceletknot) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletBraceletknot.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletBraceletknot) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletBraceletknotUpdateCacheMut.RLock()
	cache, cached := braceletBraceletknotUpdateCache[key]
	braceletBraceletknotUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletBraceletknotColumns, braceletBraceletknotPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_braceletknot, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_braceletknot` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletBraceletknotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, append(wl, braceletBraceletknotPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_braceletknot row")
	}

	if !cached {
		braceletBraceletknotUpdateCacheMut.Lock()
		braceletBraceletknotUpdateCache[key] = cache
		braceletBraceletknotUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletBraceletknotQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletBraceletknotQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_braceletknot")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletBraceletknotSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletknotSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletBraceletknotSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletBraceletknotSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_braceletknot` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletknotPrimaryKeyColumns), len(colNames)+1, len(braceletBraceletknotPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletBraceletknot slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletBraceletknot) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletBraceletknot) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletBraceletknot) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletBraceletknot) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_braceletknot provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletBraceletknotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletBraceletknotUpsertCacheMut.RLock()
	cache, cached := braceletBraceletknotUpsertCache[key]
	braceletBraceletknotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletBraceletknotColumns,
			braceletBraceletknotColumnsWithDefault,
			braceletBraceletknotColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletBraceletknotColumns,
			braceletBraceletknotPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_braceletknot, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_braceletknot", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_braceletknot` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletBraceletknotType, braceletBraceletknotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_braceletknot")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletBraceletknotMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_braceletknot")
	}

CacheNoHooks:
	if !cached {
		braceletBraceletknotUpsertCacheMut.Lock()
		braceletBraceletknotUpsertCache[key] = cache
		braceletBraceletknotUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletBraceletknot record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletknot) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletBraceletknot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletBraceletknot) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknot provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletBraceletknot record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletBraceletknot) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletBraceletknot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletBraceletknot) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknot provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletBraceletknotPrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_braceletknot` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_braceletknot")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletBraceletknotQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletBraceletknotQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletBraceletknotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_braceletknot")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletBraceletknotSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletBraceletknotSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknot slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletBraceletknotSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletBraceletknotSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknot slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_braceletknot` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletknotPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletBraceletknotPrimaryKeyColumns), 1, len(braceletBraceletknotPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletBraceletknot slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletBraceletknot) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletBraceletknot) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletBraceletknot) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletBraceletknot provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletBraceletknot) Reload(exec boil.Executor) error {
	ret, err := FindBraceletBraceletknot(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletknotSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletBraceletknotSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletknotSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletBraceletknotSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletBraceletknotSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletBraceletknots := BraceletBraceletknotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletBraceletknotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_braceletknot`.* FROM `bracelet_braceletknot` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletBraceletknotPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletBraceletknotPrimaryKeyColumns), 1, len(braceletBraceletknotPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletBraceletknots)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletBraceletknotSlice")
	}

	*o = braceletBraceletknots

	return nil
}

// BraceletBraceletknotExists checks if the BraceletBraceletknot row exists.
func BraceletBraceletknotExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_braceletknot` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_braceletknot exists")
	}

	return exists, nil
}

// BraceletBraceletknotExistsG checks if the BraceletBraceletknot row exists.
func BraceletBraceletknotExistsG(id int) (bool, error) {
	return BraceletBraceletknotExists(boil.GetDB(), id)
}

// BraceletBraceletknotExistsGP checks if the BraceletBraceletknot row exists. Panics on error.
func BraceletBraceletknotExistsGP(id int) bool {
	e, err := BraceletBraceletknotExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletBraceletknotExistsP checks if the BraceletBraceletknot row exists. Panics on error.
func BraceletBraceletknotExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletBraceletknotExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
