// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// BraceletPhoto is an object representing the database table.
type BraceletPhoto struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Accepted   int8   `boil:"accepted" json:"accepted" toml:"accepted" yaml:"accepted"`
	BraceletID int    `boil:"bracelet_id" json:"bracelet_id" toml:"bracelet_id" yaml:"bracelet_id"`
	UserID     int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *braceletPhotoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L braceletPhotoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// braceletPhotoR is where relationships are stored.
type braceletPhotoR struct {
	Bracelet               *BraceletBracelet
	User                   *AuthUser
	PhotoBraceletBracelets BraceletBraceletSlice
}

// braceletPhotoL is where Load methods for each relationship are stored.
type braceletPhotoL struct{}

var (
	braceletPhotoColumns               = []string{"id", "name", "accepted", "bracelet_id", "user_id"}
	braceletPhotoColumnsWithoutDefault = []string{"name", "accepted", "bracelet_id", "user_id"}
	braceletPhotoColumnsWithDefault    = []string{"id"}
	braceletPhotoPrimaryKeyColumns     = []string{"id"}
)

type (
	// BraceletPhotoSlice is an alias for a slice of pointers to BraceletPhoto.
	// This should generally be used opposed to []BraceletPhoto.
	BraceletPhotoSlice []*BraceletPhoto

	braceletPhotoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	braceletPhotoType                 = reflect.TypeOf(&BraceletPhoto{})
	braceletPhotoMapping              = queries.MakeStructMapping(braceletPhotoType)
	braceletPhotoPrimaryKeyMapping, _ = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, braceletPhotoPrimaryKeyColumns)
	braceletPhotoInsertCacheMut       sync.RWMutex
	braceletPhotoInsertCache          = make(map[string]insertCache)
	braceletPhotoUpdateCacheMut       sync.RWMutex
	braceletPhotoUpdateCache          = make(map[string]updateCache)
	braceletPhotoUpsertCacheMut       sync.RWMutex
	braceletPhotoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single braceletPhoto record from the query, and panics on error.
func (q braceletPhotoQuery) OneP() *BraceletPhoto {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single braceletPhoto record from the query.
func (q braceletPhotoQuery) One() (*BraceletPhoto, error) {
	o := &BraceletPhoto{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bracelet_photo")
	}

	return o, nil
}

// AllP returns all BraceletPhoto records from the query, and panics on error.
func (q braceletPhotoQuery) AllP() BraceletPhotoSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BraceletPhoto records from the query.
func (q braceletPhotoQuery) All() (BraceletPhotoSlice, error) {
	var o BraceletPhotoSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BraceletPhoto slice")
	}

	return o, nil
}

// CountP returns the count of all BraceletPhoto records in the query, and panics on error.
func (q braceletPhotoQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BraceletPhoto records in the query.
func (q braceletPhotoQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bracelet_photo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q braceletPhotoQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q braceletPhotoQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bracelet_photo exists")
	}

	return count > 0, nil
}

// BraceletG pointed to by the foreign key.
func (o *BraceletPhoto) BraceletG(mods ...qm.QueryMod) braceletBraceletQuery {
	return o.Bracelet(boil.GetDB(), mods...)
}

// Bracelet pointed to by the foreign key.
func (o *BraceletPhoto) Bracelet(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BraceletID),
	}

	queryMods = append(queryMods, mods...)

	query := BraceletBracelets(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_bracelet`")

	return query
}

// UserG pointed to by the foreign key.
func (o *BraceletPhoto) UserG(mods ...qm.QueryMod) authUserQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *BraceletPhoto) User(exec boil.Executor, mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "`auth_user`")

	return query
}

// PhotoBraceletBraceletsG retrieves all the bracelet_bracelet's bracelet bracelet via photo_id column.
func (o *BraceletPhoto) PhotoBraceletBraceletsG(mods ...qm.QueryMod) braceletBraceletQuery {
	return o.PhotoBraceletBracelets(boil.GetDB(), mods...)
}

// PhotoBraceletBracelets retrieves all the bracelet_bracelet's bracelet bracelet with an executor via photo_id column.
func (o *BraceletPhoto) PhotoBraceletBracelets(exec boil.Executor, mods ...qm.QueryMod) braceletBraceletQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`photo_id`=?", o.ID),
	)

	query := BraceletBracelets(exec, queryMods...)
	queries.SetFrom(query.Query, "`bracelet_bracelet` as `a`")
	return query
}

// LoadBracelet allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletPhotoL) LoadBracelet(e boil.Executor, singular bool, maybeBraceletPhoto interface{}) error {
	var slice []*BraceletPhoto
	var object *BraceletPhoto

	count := 1
	if singular {
		object = maybeBraceletPhoto.(*BraceletPhoto)
	} else {
		slice = *maybeBraceletPhoto.(*BraceletPhotoSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletPhotoR{}
		}
		args[0] = object.BraceletID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletPhotoR{}
			}
			args[i] = obj.BraceletID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_bracelet` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BraceletBracelet")
	}
	defer results.Close()

	var resultSlice []*BraceletBracelet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BraceletBracelet")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Bracelet = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BraceletID == foreign.ID {
				local.R.Bracelet = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletPhotoL) LoadUser(e boil.Executor, singular bool, maybeBraceletPhoto interface{}) error {
	var slice []*BraceletPhoto
	var object *BraceletPhoto

	count := 1
	if singular {
		object = maybeBraceletPhoto.(*BraceletPhoto)
	} else {
		slice = *maybeBraceletPhoto.(*BraceletPhotoSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletPhotoR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletPhotoR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from `auth_user` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}
	defer results.Close()

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadPhotoBraceletBracelets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (braceletPhotoL) LoadPhotoBraceletBracelets(e boil.Executor, singular bool, maybeBraceletPhoto interface{}) error {
	var slice []*BraceletPhoto
	var object *BraceletPhoto

	count := 1
	if singular {
		object = maybeBraceletPhoto.(*BraceletPhoto)
	} else {
		slice = *maybeBraceletPhoto.(*BraceletPhotoSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &braceletPhotoR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &braceletPhotoR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `bracelet_bracelet` where `photo_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bracelet_bracelet")
	}
	defer results.Close()

	var resultSlice []*BraceletBracelet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bracelet_bracelet")
	}

	if singular {
		object.R.PhotoBraceletBracelets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PhotoID.Int {
				local.R.PhotoBraceletBracelets = append(local.R.PhotoBraceletBracelets, foreign)
				break
			}
		}
	}

	return nil
}

// SetBraceletG of the bracelet_photo to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletPhotos.
// Uses the global database handle.
func (o *BraceletPhoto) SetBraceletG(insert bool, related *BraceletBracelet) error {
	return o.SetBracelet(boil.GetDB(), insert, related)
}

// SetBraceletP of the bracelet_photo to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletPhotos.
// Panics on error.
func (o *BraceletPhoto) SetBraceletP(exec boil.Executor, insert bool, related *BraceletBracelet) {
	if err := o.SetBracelet(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBraceletGP of the bracelet_photo to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletPhotos.
// Uses the global database handle and panics on error.
func (o *BraceletPhoto) SetBraceletGP(insert bool, related *BraceletBracelet) {
	if err := o.SetBracelet(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBracelet of the bracelet_photo to the related item.
// Sets o.R.Bracelet to related.
// Adds o to related.R.BraceletBraceletPhotos.
func (o *BraceletPhoto) SetBracelet(exec boil.Executor, insert bool, related *BraceletBracelet) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_photo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bracelet_id"}),
		strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BraceletID = related.ID

	if o.R == nil {
		o.R = &braceletPhotoR{
			Bracelet: related,
		}
	} else {
		o.R.Bracelet = related
	}

	if related.R == nil {
		related.R = &braceletBraceletR{
			BraceletBraceletPhotos: BraceletPhotoSlice{o},
		}
	} else {
		related.R.BraceletBraceletPhotos = append(related.R.BraceletBraceletPhotos, o)
	}

	return nil
}

// SetUserG of the bracelet_photo to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletPhotos.
// Uses the global database handle.
func (o *BraceletPhoto) SetUserG(insert bool, related *AuthUser) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the bracelet_photo to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletPhotos.
// Panics on error.
func (o *BraceletPhoto) SetUserP(exec boil.Executor, insert bool, related *AuthUser) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the bracelet_photo to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletPhotos.
// Uses the global database handle and panics on error.
func (o *BraceletPhoto) SetUserGP(insert bool, related *AuthUser) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the bracelet_photo to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBraceletPhotos.
func (o *BraceletPhoto) SetUser(exec boil.Executor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bracelet_photo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &braceletPhotoR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserBraceletPhotos: BraceletPhotoSlice{o},
		}
	} else {
		related.R.UserBraceletPhotos = append(related.R.UserBraceletPhotos, o)
	}

	return nil
}

// AddPhotoBraceletBraceletsG adds the given related objects to the existing relationships
// of the bracelet_photo, optionally inserting them as new records.
// Appends related to o.R.PhotoBraceletBracelets.
// Sets related.R.Photo appropriately.
// Uses the global database handle.
func (o *BraceletPhoto) AddPhotoBraceletBraceletsG(insert bool, related ...*BraceletBracelet) error {
	return o.AddPhotoBraceletBracelets(boil.GetDB(), insert, related...)
}

// AddPhotoBraceletBraceletsP adds the given related objects to the existing relationships
// of the bracelet_photo, optionally inserting them as new records.
// Appends related to o.R.PhotoBraceletBracelets.
// Sets related.R.Photo appropriately.
// Panics on error.
func (o *BraceletPhoto) AddPhotoBraceletBraceletsP(exec boil.Executor, insert bool, related ...*BraceletBracelet) {
	if err := o.AddPhotoBraceletBracelets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPhotoBraceletBraceletsGP adds the given related objects to the existing relationships
// of the bracelet_photo, optionally inserting them as new records.
// Appends related to o.R.PhotoBraceletBracelets.
// Sets related.R.Photo appropriately.
// Uses the global database handle and panics on error.
func (o *BraceletPhoto) AddPhotoBraceletBraceletsGP(insert bool, related ...*BraceletBracelet) {
	if err := o.AddPhotoBraceletBracelets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPhotoBraceletBracelets adds the given related objects to the existing relationships
// of the bracelet_photo, optionally inserting them as new records.
// Appends related to o.R.PhotoBraceletBracelets.
// Sets related.R.Photo appropriately.
func (o *BraceletPhoto) AddPhotoBraceletBracelets(exec boil.Executor, insert bool, related ...*BraceletBracelet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhotoID.Int = o.ID
			rel.PhotoID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bracelet_bracelet` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
				strmangle.WhereClause("`", "`", 0, braceletBraceletPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhotoID.Int = o.ID
			rel.PhotoID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &braceletPhotoR{
			PhotoBraceletBracelets: related,
		}
	} else {
		o.R.PhotoBraceletBracelets = append(o.R.PhotoBraceletBracelets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &braceletBraceletR{
				Photo: o,
			}
		} else {
			rel.R.Photo = o
		}
	}
	return nil
}

// SetPhotoBraceletBraceletsG removes all previously related items of the
// bracelet_photo replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Photo's PhotoBraceletBracelets accordingly.
// Replaces o.R.PhotoBraceletBracelets with related.
// Sets related.R.Photo's PhotoBraceletBracelets accordingly.
// Uses the global database handle.
func (o *BraceletPhoto) SetPhotoBraceletBraceletsG(insert bool, related ...*BraceletBracelet) error {
	return o.SetPhotoBraceletBracelets(boil.GetDB(), insert, related...)
}

// SetPhotoBraceletBraceletsP removes all previously related items of the
// bracelet_photo replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Photo's PhotoBraceletBracelets accordingly.
// Replaces o.R.PhotoBraceletBracelets with related.
// Sets related.R.Photo's PhotoBraceletBracelets accordingly.
// Panics on error.
func (o *BraceletPhoto) SetPhotoBraceletBraceletsP(exec boil.Executor, insert bool, related ...*BraceletBracelet) {
	if err := o.SetPhotoBraceletBracelets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPhotoBraceletBraceletsGP removes all previously related items of the
// bracelet_photo replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Photo's PhotoBraceletBracelets accordingly.
// Replaces o.R.PhotoBraceletBracelets with related.
// Sets related.R.Photo's PhotoBraceletBracelets accordingly.
// Uses the global database handle and panics on error.
func (o *BraceletPhoto) SetPhotoBraceletBraceletsGP(insert bool, related ...*BraceletBracelet) {
	if err := o.SetPhotoBraceletBracelets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPhotoBraceletBracelets removes all previously related items of the
// bracelet_photo replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Photo's PhotoBraceletBracelets accordingly.
// Replaces o.R.PhotoBraceletBracelets with related.
// Sets related.R.Photo's PhotoBraceletBracelets accordingly.
func (o *BraceletPhoto) SetPhotoBraceletBracelets(exec boil.Executor, insert bool, related ...*BraceletBracelet) error {
	query := "update `bracelet_bracelet` set `photo_id` = null where `photo_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PhotoBraceletBracelets {
			rel.PhotoID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Photo = nil
		}

		o.R.PhotoBraceletBracelets = nil
	}
	return o.AddPhotoBraceletBracelets(exec, insert, related...)
}

// RemovePhotoBraceletBraceletsG relationships from objects passed in.
// Removes related items from R.PhotoBraceletBracelets (uses pointer comparison, removal does not keep order)
// Sets related.R.Photo.
// Uses the global database handle.
func (o *BraceletPhoto) RemovePhotoBraceletBraceletsG(related ...*BraceletBracelet) error {
	return o.RemovePhotoBraceletBracelets(boil.GetDB(), related...)
}

// RemovePhotoBraceletBraceletsP relationships from objects passed in.
// Removes related items from R.PhotoBraceletBracelets (uses pointer comparison, removal does not keep order)
// Sets related.R.Photo.
// Panics on error.
func (o *BraceletPhoto) RemovePhotoBraceletBraceletsP(exec boil.Executor, related ...*BraceletBracelet) {
	if err := o.RemovePhotoBraceletBracelets(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePhotoBraceletBraceletsGP relationships from objects passed in.
// Removes related items from R.PhotoBraceletBracelets (uses pointer comparison, removal does not keep order)
// Sets related.R.Photo.
// Uses the global database handle and panics on error.
func (o *BraceletPhoto) RemovePhotoBraceletBraceletsGP(related ...*BraceletBracelet) {
	if err := o.RemovePhotoBraceletBracelets(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePhotoBraceletBracelets relationships from objects passed in.
// Removes related items from R.PhotoBraceletBracelets (uses pointer comparison, removal does not keep order)
// Sets related.R.Photo.
func (o *BraceletPhoto) RemovePhotoBraceletBracelets(exec boil.Executor, related ...*BraceletBracelet) error {
	var err error
	for _, rel := range related {
		rel.PhotoID.Valid = false
		if rel.R != nil {
			rel.R.Photo = nil
		}
		if err = rel.Update(exec, "photo_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PhotoBraceletBracelets {
			if rel != ri {
				continue
			}

			ln := len(o.R.PhotoBraceletBracelets)
			if ln > 1 && i < ln-1 {
				o.R.PhotoBraceletBracelets[i] = o.R.PhotoBraceletBracelets[ln-1]
			}
			o.R.PhotoBraceletBracelets = o.R.PhotoBraceletBracelets[:ln-1]
			break
		}
	}

	return nil
}

// BraceletPhotosG retrieves all records.
func BraceletPhotosG(mods ...qm.QueryMod) braceletPhotoQuery {
	return BraceletPhotos(boil.GetDB(), mods...)
}

// BraceletPhotos retrieves all the records using an executor.
func BraceletPhotos(exec boil.Executor, mods ...qm.QueryMod) braceletPhotoQuery {
	mods = append(mods, qm.From("`bracelet_photo`"))
	return braceletPhotoQuery{NewQuery(exec, mods...)}
}

// FindBraceletPhotoG retrieves a single record by ID.
func FindBraceletPhotoG(id int, selectCols ...string) (*BraceletPhoto, error) {
	return FindBraceletPhoto(boil.GetDB(), id, selectCols...)
}

// FindBraceletPhotoGP retrieves a single record by ID, and panics on error.
func FindBraceletPhotoGP(id int, selectCols ...string) *BraceletPhoto {
	retobj, err := FindBraceletPhoto(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBraceletPhoto retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBraceletPhoto(exec boil.Executor, id int, selectCols ...string) (*BraceletPhoto, error) {
	braceletPhotoObj := &BraceletPhoto{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bracelet_photo` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(braceletPhotoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bracelet_photo")
	}

	return braceletPhotoObj, nil
}

// FindBraceletPhotoP retrieves a single record by ID with an executor, and panics on error.
func FindBraceletPhotoP(exec boil.Executor, id int, selectCols ...string) *BraceletPhoto {
	retobj, err := FindBraceletPhoto(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BraceletPhoto) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BraceletPhoto) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BraceletPhoto) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BraceletPhoto) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_photo provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(braceletPhotoColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	braceletPhotoInsertCacheMut.RLock()
	cache, cached := braceletPhotoInsertCache[key]
	braceletPhotoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			braceletPhotoColumns,
			braceletPhotoColumnsWithDefault,
			braceletPhotoColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, returnColumns)
		if err != nil {
			return err
		}
		cache.query = fmt.Sprintf("INSERT INTO `bracelet_photo` (`%s`) VALUES (%s)", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bracelet_photo` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bracelet_photo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletPhotoMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_photo")
	}

CacheNoHooks:
	if !cached {
		braceletPhotoInsertCacheMut.Lock()
		braceletPhotoInsertCache[key] = cache
		braceletPhotoInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BraceletPhoto record. See Update for
// whitelist behavior description.
func (o *BraceletPhoto) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BraceletPhoto record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BraceletPhoto) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BraceletPhoto, and panics on error.
// See Update for whitelist behavior description.
func (o *BraceletPhoto) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BraceletPhoto.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BraceletPhoto) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	braceletPhotoUpdateCacheMut.RLock()
	cache, cached := braceletPhotoUpdateCache[key]
	braceletPhotoUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(braceletPhotoColumns, braceletPhotoPrimaryKeyColumns, whitelist)
		if len(wl) == 0 {
			return errors.New("models: unable to update bracelet_photo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bracelet_photo` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, braceletPhotoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, append(wl, braceletPhotoPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update bracelet_photo row")
	}

	if !cached {
		braceletPhotoUpdateCacheMut.Lock()
		braceletPhotoUpdateCache[key] = cache
		braceletPhotoUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q braceletPhotoQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q braceletPhotoQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for bracelet_photo")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BraceletPhotoSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BraceletPhotoSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BraceletPhotoSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BraceletPhotoSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE `bracelet_photo` SET %s WHERE (`id`) IN (%s)",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletPhotoPrimaryKeyColumns), len(colNames)+1, len(braceletPhotoPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in braceletPhoto slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BraceletPhoto) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BraceletPhoto) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BraceletPhoto) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BraceletPhoto) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no bracelet_photo provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(braceletPhotoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	braceletPhotoUpsertCacheMut.RLock()
	cache, cached := braceletPhotoUpsertCache[key]
	braceletPhotoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			braceletPhotoColumns,
			braceletPhotoColumnsWithDefault,
			braceletPhotoColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			braceletPhotoColumns,
			braceletPhotoPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert bracelet_photo, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "bracelet_photo", update, whitelist)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bracelet_photo` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(braceletPhotoType, braceletPhotoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bracelet_photo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == braceletPhotoMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bracelet_photo")
	}

CacheNoHooks:
	if !cached {
		braceletPhotoUpsertCacheMut.Lock()
		braceletPhotoUpsertCache[key] = cache
		braceletPhotoUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BraceletPhoto record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletPhoto) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BraceletPhoto record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BraceletPhoto) DeleteG() error {
	if o == nil {
		return errors.New("models: no BraceletPhoto provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BraceletPhoto record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BraceletPhoto) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BraceletPhoto record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BraceletPhoto) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletPhoto provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), braceletPhotoPrimaryKeyMapping)
	sql := "DELETE FROM `bracelet_photo` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from bracelet_photo")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q braceletPhotoQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q braceletPhotoQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no braceletPhotoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from bracelet_photo")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BraceletPhotoSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BraceletPhotoSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no BraceletPhoto slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BraceletPhotoSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BraceletPhotoSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no BraceletPhoto slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM `bracelet_photo` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletPhotoPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(braceletPhotoPrimaryKeyColumns), 1, len(braceletPhotoPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from braceletPhoto slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BraceletPhoto) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BraceletPhoto) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BraceletPhoto) ReloadG() error {
	if o == nil {
		return errors.New("models: no BraceletPhoto provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BraceletPhoto) Reload(exec boil.Executor) error {
	ret, err := FindBraceletPhoto(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletPhotoSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BraceletPhotoSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletPhotoSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BraceletPhotoSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BraceletPhotoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	braceletPhotos := BraceletPhotoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), braceletPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT `bracelet_photo`.* FROM `bracelet_photo` WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, braceletPhotoPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(braceletPhotoPrimaryKeyColumns), 1, len(braceletPhotoPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&braceletPhotos)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BraceletPhotoSlice")
	}

	*o = braceletPhotos

	return nil
}

// BraceletPhotoExists checks if the BraceletPhoto row exists.
func BraceletPhotoExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from `bracelet_photo` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bracelet_photo exists")
	}

	return exists, nil
}

// BraceletPhotoExistsG checks if the BraceletPhoto row exists.
func BraceletPhotoExistsG(id int) (bool, error) {
	return BraceletPhotoExists(boil.GetDB(), id)
}

// BraceletPhotoExistsGP checks if the BraceletPhoto row exists. Panics on error.
func BraceletPhotoExistsGP(id int) bool {
	e, err := BraceletPhotoExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BraceletPhotoExistsP checks if the BraceletPhoto row exists. Panics on error.
func BraceletPhotoExistsP(exec boil.Executor, id int) bool {
	e, err := BraceletPhotoExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
